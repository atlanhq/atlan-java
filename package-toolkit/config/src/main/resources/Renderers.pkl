/* SPDX-License-Identifier: Apache-2.0
   Copyright 2024 Atlan Pte. Ltd. */

/// Module for rendering the outputs for a custom package's configuration in Atlan.
@ModuleInfo { minPklVersion = "0.25.1" }
module com.atlan.pkg.Renderers

import "Config.pkl"
import "Connectors.pkl"
import "Credential.pkl"

/// Render the configmap YAML file.
const function getConfigMap(m: Config): FileOutput = new FileOutput {
  value = new ConfigMap {
    name = m.name
    config = m.uiConfig
  }
  renderer = new YamlRenderer {}
}

/// Render the connector-specific credential configmap YAML file.
const function getCredentialConfigMap(m: Credential): FileOutput = new FileOutput {
  value = new ConnectorConfigMap {
    name = m.name
    config = m
  }
  renderer = new YamlRenderer {}
}

/// Render the workflow template YAML file.
const function getWorkflowTemplate(m: Config): FileOutput = new FileOutput {
  value = new WorkflowTemplate {
    name = m.name
    template = new WorkflowTemplateDefinition {
      c = m.uiConfig
      container = new WorkflowContainer {
        config = m.uiConfig
        image = m.containerImage
        command = m.command
        args = m.args
        imagePullPolicy = m.containerImagePullPolicy
        volumeMounts = if (credVariable != null) new Listing {
          new VolumeMount {
            name = "credentials"
            mountPath = "/tmp/credentials"
          }
        } else null
      }
      outputs = m.outputs
      p = m.name
      credVariable = let (creds = m.uiConfig.properties.filter((_, u) -> u is Config.CredentialInput))
          if (creds.isEmpty) null else creds.keys.first
      volumes = if (credVariable != null) new Listing {
        new EmptyDirVolume {
          name = "credentials"
        }
      } else null
      initContainers = if (credVariable != null) new Listing {
        new WorkflowContainer {
          name = "fetch-credentials"
          image = "ghcr.io/atlanhq/rest-master:e0e3807"
          command = new Listing {
            "/bin/sh"
            "-c"
            """
            if [ -z "$\(credVariable.toUpperCase())" ]; then exit 0; fi
            python3 main.py GET http://heracles-service.heracles.svc.cluster.local/credentials/$\(credVariable.toUpperCase())/use --raw-input '{}' --raw-input-file-pattern '' --raw-input-file-sort '' --raw-input-multiline f --execution-script "if state == ExecutionState.API_FAIL and (response.status_code >= 500 or response.status_code in {400}):\\n  LOGGER.debug('Heracles is unavailable. Performing retry with back-off')\\n  failure_handler = FailureHandler.RETRY\\nif state == ExecutionState.OUTPUT_PROCESS:\\n  output = json.loads(output)\\nif state == ExecutionState.API_POST:\\n  stop = True" --raw-input-paginate '0' --auth-type oauth2 --auth-oauth2-type client_credentials --auth-oauth2-impersonate-user "$IMPERSONATE_USER" --auth-oauth2-client-credentials-client-id CLIENT_ID --auth-oauth2-client-credentials-secret CLIENT_SECRET --auth-oauth2-client-credentials-token-url TOKEN_URL --output-chunk-size '0' --output-file-prefix /tmp/credentials --pagination-wait-time '0' --max-retries '10'
            """
          }.toList()
          env = new Listing {
            new NameValuePair {
              name = "IMPERSONATE_USER"
              value = "{{=sprig.ternary(sprig.dig('labels', 'workflows', 'argoproj', 'io/creator', '', workflow), '', 'true' == inputs.parameters['impersonate'])}}"
            }
            new NameValuePair {
              name = credVariable.toUpperCase()
              value = "{{inputs.parameters.\(credVariable)}}"
            }
            new NameValuePair {
              name = "OAUTHLIB_INSECURE_TRANSPORT"
              value = "1"
            }
            new NamedSecret {
              name = "CLIENT_ID"
              secretName = "argo-client-creds"
              secretKey = "login"
            }
            new NamedSecret {
              name = "CLIENT_SECRET"
              secretName = "argo-client-creds"
              secretKey = "password"
            }
            new NamedSecret {
              name = "TOKEN_URL"
              secretName = "argo-client-creds"
              secretKey = "host"
            }
          }.toList()
          mirrorVolumeMounts = true
        }
      } else null
    }
  }
  renderer = new YamlRenderer {}
}

/// Render the index.js file.
const function getIndexJs(): FileOutput = new FileOutput {
  text = """
    function dummy() {
        console.log("don't call this.")
    }
    module.exports = dummy;
    """
}

/// Render the package.json file.
const function getPackageJson(m: Config): FileOutput = new FileOutput {
  value = new PackageDefinition {
    packageId = m.packageId
    packageName = m.packageName
    version = m.version.toString()
    description = m.description
    iconUrl = m.iconUrl
    docsUrl = m.docsUrl
    keywords = m.keywords
    allowSchedule = m.allowSchedule
    certified = m.certified
    preview = m.preview
    connectorType = m.connectorType
    category = m.category
  }
  renderer = new JsonRenderer {}
}

/// Render the Kotlin class file that strongly-types the configuration handover.
const function getConfigClassKt(m: Config, className: String): FileOutput = new FileOutput {
  text = new Listing {
    """
    /* SPDX-License-Identifier: Apache-2.0
       Copyright 2024 Atlan Pte. Ltd. */
    import com.atlan.model.assets.Connection
    import com.atlan.pkg.CustomConfig
    import com.atlan.pkg.model.ConnectorAndConnections
    import com.atlan.pkg.serde.WidgetSerde
    import com.fasterxml.jackson.annotation.JsonAutoDetect
    import com.fasterxml.jackson.annotation.JsonProperty
    import com.fasterxml.jackson.databind.annotation.JsonDeserialize
    import com.fasterxml.jackson.databind.annotation.JsonSerialize
    import javax.annotation.processing.Generated;

    /**
     * Expected configuration for the \(m.packageName) custom package.
     */
    @Generated("com.atlan.pkg.CustomPackage")
    @JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.ANY)
    data class \(className)(
    """
    for (k, u in m.uiConfig.properties) {(
      if (u is Config.DropDown || u is Config.MultipleGroups || u is Config.MultipleUsers || u is Config.ConnectionSelector)
        """
            @JsonDeserialize(using = WidgetSerde.MultiSelectDeserializer::class)
            @JsonSerialize(using = WidgetSerde.MultiSelectSerializer::class)
            @JsonProperty(\"\(k)\") val \(getLowerCamelCase(k)): List<String>? = null,
        """
      else if (u is Config.ConnectorTypeSelector)
        """
            @JsonDeserialize(using = WidgetSerde.ConnectorAndConnectionsDeserializer::class)
            @JsonSerialize(using = WidgetSerde.ConnectorAndConnectionsSerializer::class)
            @JsonProperty(\"\(k)\") val \(getLowerCamelCase(k)): ConnectorAndConnections? = null,
        """
      else if (u is Config.ConnectionCreator)
        """
            @JsonDeserialize(using = WidgetSerde.ConnectionDeserializer::class)
            @JsonSerialize(using = WidgetSerde.ConnectionSerializer::class)
            @JsonProperty(\"\(k)\") val \(getLowerCamelCase(k)): Connection? = null,
        """
      else if (u is Config.BooleanInput)
        """
            @JsonProperty(\"\(k)\") val \(getLowerCamelCase(k)): Boolean? = null,
        """
      else if (u is Config.NumericInput)
        """
            @JsonProperty(\"\(k)\") val \(getLowerCamelCase(k)): Number? = null,
        """
      else if (u is Config.DateInput)
        """
            @JsonProperty(\"\(k)\") val \(getLowerCamelCase(k)): Long? = null,
        """
      else
        """
            @JsonProperty(\"\(k)\") val \(getLowerCamelCase(k)): String? = null,
        """
    )}
    """
    ) : CustomConfig()
    """
  }.join("\n")
}

const function getLowerCamelCase(s: String): String =
  s.split(Regex("[\\W_]+")).foldIndexed("", (idx, acc, word) ->
    if (idx == 0)
      "\(acc)\(word.decapitalize())"
    else
      "\(acc)\(word.capitalize())"
  )

/// Render an empty file.
const function getBlankFile(): FileOutput = new FileOutput {
  text = ""
}

/// Render a baseline version file for a Python custom package.
const function getVersionPy(m: Config): FileOutput = new FileOutput {
  text = """
    \(m.version)
    """
}

/// Render a baseline version file for a Python custom package.
const function getMainPy(pkgName: String): FileOutput = new FileOutput {
  text = """
    from \(pkgName).\(pkgName)_cfg import RuntimeConfig
    import logging

    LOGGER = logging.getLogger(__name__)

    def main():
        runtime_config = RuntimeConfig()
        custom_config = runtime_config.custom_config
        # Retrieve inputs from custom_config

        LOGGER.info("Starting execution of \(pkgName)...")


    if __name__ == "__main__":
        main()
    """
}

/// Render the logging configuration for a Python custom package.
const function getLoggingConfPy(): FileOutput = new FileOutput {
  text = """
    [loggers]
    keys=root,pyatlan,urllib3

    [handlers]
    keys=consoleHandler,fileHandler,jsonHandler

    [formatters]
    keys=simpleFormatter,jsonFormatter

    [logger_root]
    level=INFO
    handlers=consoleHandler,fileHandler

    [logger_pyatlan]
    level=DEBUG
    handlers=fileHandler,jsonHandler
    qualname=pyatlan
    propagate=0

    [logger_urllib3]
    level=DEBUG
    handlers=fileHandler,jsonHandler
    qualname=urllib3
    propagate=0

    [handler_consoleHandler]
    class=StreamHandler
    formatter=simpleFormatter
    args=(sys.stdout,)

    [handler_fileHandler]
    class=FileHandler
    level=DEBUG
    formatter=simpleFormatter
    args=('/tmp/debug.log',)

    [handler_jsonHandler]
    class=FileHandler
    level=DEBUG
    formatter=jsonFormatter
    args=('/tmp/pyatlan.json',)

    [formatter_simpleFormatter]
    format=%(asctime)s - %(name)s - %(levelname)s - %(message)s

    [formatter_jsonFormatter]
    format=%(asctime)s - %(name)s - %(levelname)s - %(message)s
    class=pyatlan.utils.JsonFormatter
    """
}

/// Render the baseline requirements.txt for a Python custom package.
const function getRequirementsPy(): FileOutput = new FileOutput {
  text = """
    pyatlan
    """
}

/// Render the baseline requirements-dev.txt for a Python custom package.
const function getRequirementsDevPy(): FileOutput = new FileOutput {
  text = """
    pytest
    pytest-order
    nanoid
    """
}

/// Render the baseline Dockerfile for a Python custom package.
const function getDockerfilePy(pkgName: String): FileOutput = new FileOutput {
  text = """
    FROM python:3.9-bookworm

    LABEL org.opencontainers.image.vendor="Atlan Pte. Ltd." \\
          org.opencontainers.image.source="https://github.com/atlanhq/atlan-python" \\
          org.opencontainers.image.description="Atlan image for \(pkgName) custom package." \\
          org.opencontainers.image.licenses=Apache-2

    COPY requirements.txt requirements.txt
    ADD \(pkgName) /app/\(pkgName)

    RUN wget -O /usr/local/bin/dumb-init https://github.com/Yelp/dumb-init/releases/download/v1.2.5/dumb-init_1.2.5_x86_64 \\
            && chmod +x /usr/local/bin/dumb-init
            && pip3 install -r requirements.txt

    WORKDIR /app
    ENTRYPOINT ["/usr/local/bin/dumb-init", "--"]
    """
}

/// Render the Python class file that strongly-types the configuration handover.
const function getConfigClassPy(m: Config): FileOutput = new FileOutput {
  text = new Listing {
    """
    from datetime import datetime
    from pathlib import Path
    from pydantic.v1 import BaseModel, BaseSettings, Field, validator
    from pyatlan.model.assets import Connection
    from pyatlan.pkg.models import ConnectorAndConnection
    from pyatlan.pkg.utils import validate_connection, validate_multiselect, validate_connector_and_connection
    from typing import Any, Optional, Union, Dict
    import logging.config

    PARENT = Path(__file__).parent
    LOGGING_CONF = PARENT / "logging.conf"
    if LOGGING_CONF.exists():
    logging.config.fileConfig(LOGGING_CONF)
    LOGGER = logging.getLogger(__name__)

    ENV = 'env'

    class CustomConfig(BaseModel):
        \"\"\"\"\"\"\"\"
    """
    for (k, u in m.uiConfig.properties) {
      if (u is Config.DropDown || u is Config.MultipleGroups || u is Config.MultipleUsers || u is Config.ConnectionSelector)
        """
            \(k): Optional[List[str]] = Field(default_factory=list)
            _validate_\(k) = validator("\(k)", pre=True, allow_reuse=True)(validate_multiselect)
        """

      else if (u is Config.ConnectorTypeSelector)
        """
            \(k): Optional[ConnectorAndConnection] = None
            _validate_\(k) = validator("\(k)", pre=True, allow_reuse=True)(validate_connector_and_connection)
        """
      else if (u is Config.ConnectionCreator)
        """
            \(k): Optional[Connection] = None
            _validate_\(k) = validator("\(k)", pre=True, allow_reuse=True)(validate_connection)
        """
      else if (u is Config.BooleanInput)
        """
            \(k): bool = None
        """
      else if (u is Config.NumericInput)
        """
            \(k): Optional[Union[int,float]] = None
        """
      else if (u is Config.DateInput)
        """
            \(k): Optional[datetime] = None
        """
      else
        """
            \(k): str
        """
    }
    """

    class RuntimeConfig(BaseSettings):
        user_id:Optional[str] = Field(default="")
        agent:Optional[str] = Field(default="")
        agent_id:Optional[str] = Field(default="")
        agent_pkg:Optional[str] = Field(default="")
        agent_wfl:Optional[str] = Field(default="")
        custom_config:Optional[CustomConfig] = None

        class Config:
            fields = {
                'user_id': {
                    ENV: 'ATLAN_USER_ID',
                },
                'agent': {
                    ENV: 'X_ATLAN_AGENT'
                },
                'agent_id': {
                    ENV: 'X_ATLAN_AGENT_ID'
                },
                'agent_pkg': {
                    ENV: 'X_ATLAN_AGENT_PACKAGE_NAME'
                },
                'agent_wfl': {
                    ENV: 'X_ATLAN_AGENT_WORKFLOW_ID'
                },
                'custom_config': {
                    ENV: 'NESTED_CONFIG'
                }
            }
            @classmethod
            def parse_env_var(cls, field_name:str, raw_value:str)->Any:
                if field_name == 'custom_config':
                    return CustomConfig.parse_raw(raw_value)
                return cls.json_loads(raw_value)

        @property
        def envars_as_dict(self) -> Dict[str, Any]:
            \"\"\"
            :return dict: returns a dict of the environment variable names and values consumed by this RuntimeConfig.
            the name of an environment variable will be the key and the value will be the value. This is provided
            to facilitate testing
            \"\"\"
            ret_val: Dict[str, Any] = {}
            for key, value in RuntimeConfig.Config.fields.items():
                if field_value := getattr(self, key):
                    ret_val[value["env"]] = field_value.json()
            return ret_val
    """
  }.join("\n")
}

local class NamePathS3Tuple extends NamedPair {
  hidden inputName: String
  name: String = "\(inputName)_s3"
  path: String = "/tmp/\(inputName)/{{inputs.parameters.\(inputName)}}"
  s3: Mapping<String, String> = new Mapping {
    ["key"] = "{{inputs.parameters.\(inputName)}}"
  }
}

class ConfigMapEntry extends NamedPair {
  name: String
  fixed valueFrom = (value) {
    when (default != null) {
      ["default"] = default
    }
  }
  hidden configMapName: String
  hidden configMapKey: String
  hidden default: String? = null
  hidden optional: Boolean? = null
  hidden fixed value = new Mapping {
    ["configMapKeyRef"] = new Mapping {
      ["name"] = configMapName
      ["key"] = configMapKey
      when (optional != null) {
        ["optional"] = optional
      }
    }
  }
}

class NamedSecret extends NamedPair {
  name: String
  fixed valueFrom = new Mapping {
    ["secretKeyRef"] = new Mapping {
      ["name"] = secretName
      ["key"] = secretKey
      when (optional != null) {
        ["optional"] = optional
      }
    }
  }
  hidden secretName: String
  hidden secretKey: String
  hidden optional: Boolean? = null
}

local class NestedConfig extends NamedPair {
  name: String = "NESTED_CONFIG"
  fixed value: String = new Listing {
    if (inputs == null || inputs.isEmpty)
      "null"
    else
      "{"
    new Listing {
      for (k, ui in inputs) {
        if (ui is Config.FileUploader || ui is Config.FileCopier)
          "\"\(k)\": \"/tmp/\(k)/{{inputs.parameters.\(k)}}\""
        else if (ui is Config.NumericInput || ui is Config.DateInput || ui is Config.BooleanInput)
          "\"\(k)\": {{inputs.parameters.\(k)}}"
        else
          "\"\(k)\": {{=toJson(inputs.parameters.\(k))}}"
      }
    }.join(",\n")
    "}"
  }.join("\n")
  hidden inputs: Map<String, Config.UIElement>
}

class NameValueBoolPair extends NamedPair {
  name: String
  value: Boolean
}

class NameValuePair extends NamedPair {
  name: String
  value: String
}

class NamePathPair extends NamedPair {
  name: String
  path: String
}

class VolumeMount extends NamedPair {
  name: String
  mountPath: String
}

open class WorkflowVolume extends NamedPair {
  name: String
}

class EmptyDirVolume extends WorkflowVolume {
  name: String
  fixed emptyDir: Map<String, String> = new Mapping {}.toMap()
}

abstract class NamedPair {
  name: String
}

/// Used to render the appropriately-wrapped output file for the UI portion of a package.
local open class ConfigMap {
  fixed apiVersion = "v1"
  fixed kind = "ConfigMap"
  fixed metadata: Mapping<String, Any> = new Mapping {
    ["name"] = name
  }
  fixed data: Mapping<String, String> = new Mapping {
    ["config"] = new JsonRenderer {}.renderValue(config)
  }
  hidden name: String
  hidden config: Config.UIConfig
}

local class PackageDefinition {
  hidden packageId: String
  hidden packageName: String
  fixed name: String = packageId
  version: String
  description: String
  keywords: Listing<String> = new Listing {}
  hidden iconUrl: String
  hidden docsUrl: String
  hidden allowSchedule: Boolean = true
  hidden certified: Boolean = true
  hidden preview: Boolean = false
  hidden connectorType: Connectors.Type?
  hidden category: String = "custom"
  fixed homepage: String = "https://packages.atlan.com/-/web/detail/\(packageId)"
  fixed main: String = "index.js"
  fixed scripts: Map<String, String> = Map()
  fixed author: Map<String, String> = new Mapping {
    ["name"] = "Atlan CSA"
    ["email"] = "csa@atlan.com"
    ["url"] = "https://atlan.com"
  }.toMap()
  fixed repository: Map<String, String> = new Mapping {
    ["type"] = "git"
    ["url"] = "https://github.com/atlanhq/marketplace-packages.git"
  }.toMap()
  fixed license: String = "MIT"
  fixed bugs: Map<String, String> = new Mapping {
    ["url"] = "https://atlan.com"
    ["email"] = "support@atlan.com"
  }.toMap()
  fixed config: PackageConfig = new PackageConfig {
    labels = new Mapping {
      ["orchestration.atlan.com/verified"] = "true"
      ["orchestration.atlan.com/type"] = category
      ["orchestration.atlan.com/source"] = connectorType?.value ?? "atlan"
      ["orchestration.atlan.com/sourceCategory"] = connectorType?.category ?? "utility"
      ["orchestration.atlan.com/certified"] = certified.toString()
      ["orchestration.atlan.com/preview"] = preview.toString()
    }
    annotations = new Mapping {
      ["orchestration.atlan.com/name"] = packageName
      ["orchestration.atlan.com/allowSchedule"] = allowSchedule.toString()
      ["orchestration.atlan.com/dependentPackage"] = ""
      ["orchestration.atlan.com/emoji"] = "🚀"
      ["orchestration.atlan.com/categories"] = keywords.join(",")
      ["orchestration.atlan.com/icon"] = iconUrl
      ["orchestration.atlan.com/logo"] = iconUrl
      ["orchestration.atlan.com/docsUrl"] = docsUrl
    }
  }
}

local class PackageConfig {
  labels: Mapping<String, String>
  annotations: Mapping<String, String>
}

/// Used to render the appropriately-wrapped output file for the Argo hand-over portion of a package.
local class WorkflowTemplate {
  fixed apiVersion = "argoproj.io/v1alpha1"
  fixed kind = "WorkflowTemplate"
  fixed metadata = new Mapping {
    ["name"] = name
  }
  fixed spec: Map<String, List<WorkflowTemplateDefinition>> = new Mapping {
    when (fileMoves.isEmpty) {
      ["templates"] = List(template)
    } else {
      ["templates"] = List(setup, (template) { name = "process" })
    }
  }.toMap()
  hidden name: String
  hidden template: WorkflowTemplateDefinition
  hidden fileMoves: Listing<TaskDefinition> = new Listing {
    for (k, u in template.inputs.config.properties) {
      when (u is Config.FileUploader) {
        new TaskDefinition {
          name = "move-\(getSafeTaskName(k))"
          templateRef = new TemplateRef {
            name = "atlan-workflow-helpers"
            template = "move-artifact-to-s3"
          }
          condition = "'{{inputs.parameters.cloud_provider}}' == 'azure' && {{inputs.parameters.is_azure_artifacts}} == false && '{{inputs.parameters.\(k)_id}}' != ''"
          arguments = new Arguments {
            parameters = new Listing {
              new NameValuePair {
                name = "file-id"
                value = "{{inputs.parameters.\(k)_id}}"
              }
              new NameValuePair {
                name = "s3-file-key"
                value = "{{inputs.parameters.\(k)_key}}"
              }
            }.toList()
          }
        }
      }
    }
  }
  hidden setup: WorkflowTemplateDefinition? = (if (!fileMoves.isEmpty)
      new WorkflowTemplateDefinition {
        c = template.c
        dag = new WorkflowDag {
          tasks = fileMoves.toList() + new Listing {
                new TaskDefinition {
                  name = "process"
                  template = "process"
                  depends = fileMoves.toList().map((it) -> it.name).join(" && ")
                  arguments = new Arguments {
                    parameters = passthrough
                  }
                }
              }.toList()
        }
        name = "main"
        p = template.p
        f = true
        credVariable = template.credVariable
        volumes = if (credVariable != null) new Listing {
          new EmptyDirVolume {
            name = "credentials"
          }
        } else null
      } else null)
  hidden passthrough: List<NameValuePair> = (if (!fileMoves.isEmpty) new Listing {
      new NameValuePair {
        name = S3_CONFIG_PREFIX
        value = "{{inputs.parameters.\(S3_CONFIG_PREFIX)}}"
      }
      for (k, u in template.inputs.config.properties) {
        when (u is Config.FileUploader) {
          new NameValuePair {
            name = k
            value = "{{inputs.parameters.\(k)_key}}"
          }
        } else {
          new NameValuePair {
            name = k
            value = "{{inputs.parameters.\(k)}}"
          }
        }
      }
    }.toList() else List())
}

local class WorkflowTemplateDefinition {
  name: String = "main"
  fixed inputs: WorkflowInputs = new WorkflowInputs {
    config = c
    pkgName = p
    fileInputSetup = f
    credentialInjection = (credVariable != null)
  }
  outputs: Config.WorkflowOutputs?
  volumes: Listing<WorkflowVolume>?
  container: WorkflowContainer?
  initContainers: Listing<WorkflowContainer>?
  dag: WorkflowDag?
  hidden c: Config.UIConfig
  hidden p: String = ""
  hidden f: Boolean = false
  hidden credVariable: String?
}

local class WorkflowInputs {
  fixed parameters: List<NamedPair> = params.toList()
  fixed artifacts: List<NamePathS3Tuple>? = if (fileInputSetup) null else arts.toList()
  hidden config: Config.UIConfig
  hidden pkgName: String = ""
  hidden fileInputSetup: Boolean = false
  hidden credentialInjection: Boolean = false

  hidden arts: Listing<NamePathS3Tuple> = new Listing {
    for (k, u in config.properties) {
      when (u is Config.FileUploader || u is Config.FileCopier) {
        new NamePathS3Tuple {
          inputName = k
        }
      }
    }
  }
  hidden params: Listing<NamedPair> = new Listing {
    when (!pkgName.isEmpty) {
      new NameValuePair {
        name = S3_CONFIG_PREFIX
        value = pkgName
      }
      when (fileInputSetup) {
        new ConfigMapEntry {
          name = "is_azure_artifacts"
          configMapName = "atlan-defaults"
          configMapKey = "azure_artifacts"
          default = "false"
        }
        new ConfigMapEntry {
          name = "cloud_provider"
          configMapName = "atlan-defaults"
          configMapKey = "cloud"
          default = "aws"
        }
      }
    }
    for (k, u in config.properties) {
      when (u is Config.FileUploader || u is Config.FileCopier) {
        when (fileInputSetup) {
          new NameValuePair {
            name = k
            value = "{}"
          }
          new NameValuePair {
            name = "\(k)_key"
            value = "{{= sprig.dig('fileKey', '\(DEFAULT_FILE)', sprig.mustFromJson(inputs.parameters.\(k))) }}"
          }
          new NameValuePair {
            name = "\(k)_id"
            value = "{{= sprig.dig('fileId', '', sprig.mustFromJson(inputs.parameters.\(k))) }}"
          }
        } else {
          new NameValuePair {
            name = k
            value = DEFAULT_FILE
          }
        }
      } else {
        when (u is Config.BooleanInput) {
          new NameValueBoolPair {
            name = k
            value = u.ui.default as Boolean
          }
        } else {
          when (u is Config.NumericInput || u is Config.DateInput) {
            new NameValuePair {
              name = k
              value = "-1"
            }
          } else {
            new NameValuePair {
              name = k
              value = ""
            }
          }
        }
      }
    }
  }
}

local class WorkflowDag {
  tasks: List<TaskDefinition>
}

local class TaskDefinition {
  name: String
  depends: String?
  template: String?
  templateRef: TemplateRef?
  fixed `when` = condition
  arguments: Arguments
  hidden condition: String?
}

local class TemplateRef {
  name: String
  template: String
}

local class Arguments {
  parameters: List<NamedPair>
}

local class WorkflowContainer {
  name: String?
  volumeMounts: Listing<VolumeMount>?
  mirrorVolumeMounts: Boolean?
  image: String
  imagePullPolicy: Config.ImagePullPolicy = "IfNotPresent"
  command: List<String>
  args: List<String> = List()
  hidden config: Config.UIConfig
  hidden defaultVars: List<NamedPair> = new Listing {
    new NameValuePair {
      name = "ATLAN_BASE_URL"
      value = "INTERNAL"
    }
    new NameValuePair {
      name = "ATLAN_USER_ID"
      value = "{{=sprig.dig('labels', 'workflows', 'argoproj', 'io/creator', '', workflow)}}"
    }
    new NameValuePair {
      name = "X_ATLAN_AGENT"
      value = "workflow"
    }
    new NameValuePair {
      name = "X_ATLAN_AGENT_ID"
      value = "{{workflow.name}}"
    }
    new NameValuePair {
      name = "X_ATLAN_AGENT_PACKAGE_NAME"
      value = "{{=sprig.dig('annotations', 'package', 'argoproj', 'io/name', '', workflow)}}"
    }
    new NameValuePair {
      name = "X_ATLAN_AGENT_WORKFLOW_ID"
      value = "{{=sprig.dig('labels', 'workflows', 'argoproj', 'io/workflow-template', '', workflow)}}"
    }
    new NameValuePair {
      name = "AZURE_STORAGE_CONTAINER_NAME"
      value = "argo-artifacts"
    }
    new ConfigMapEntry {
      name = "CLOUD_PROVIDER"
      configMapName = "atlan-defaults"
      configMapKey = "cloud"
      default = "aws"
    }
    new ConfigMapEntry {
      name = "AWS_S3_BUCKET_NAME"
      configMapName = "atlan-defaults"
      configMapKey = "bucket"
      optional = true
    }
    new ConfigMapEntry {
      name = "AWS_S3_REGION"
      configMapName = "atlan-defaults"
      configMapKey = "region"
      optional = true
    }
    new ConfigMapEntry {
      name = "GCP_STORAGE_BUCKET"
      configMapName = "atlan-defaults"
      configMapKey = "bucket"
      optional = true
    }
    new NamedSecret {
      name = "GCP_PROJECT_ID"
      secretName = "bucket-details-secret"
      secretKey = "GCP_PROJECT_ID"
      optional = true
    }
    new NamedSecret {
      name = "AZURE_STORAGE_ACCESS_KEY"
      secretName = "azurestorage"
      secretKey = "AZURE_STORAGE_ACCESS_KEY"
      optional = true
    }
    new NamedSecret {
      name = "AZURE_STORAGE_ACCOUNT"
      secretName = "azurestorage"
      secretKey = "AZURE_STORAGE_ACCOUNT"
      optional = true
    }
    new NamedSecret {
      name = "CLIENT_ID"
      secretName = "argo-client-creds"
      secretKey = "login"
    }
    new NamedSecret {
      name = "CLIENT_SECRET"
      secretName = "argo-client-creds"
      secretKey = "password"
    }
    new NamedSecret {
      name = "SMTP_HOST"
      secretName = "support-smtp-creds"
      secretKey = "host"
    }
    new NamedSecret {
      name = "SMTP_PORT"
      secretName = "support-smtp-creds"
      secretKey = "port"
    }
    new NamedSecret {
      name = "SMTP_FROM"
      secretName = "support-smtp-creds"
      secretKey = "from"
    }
    new NamedSecret {
      name = "SMTP_USER"
      secretName = "support-smtp-creds"
      secretKey = "login"
    }
    new NamedSecret {
      name = "SMTP_PASS"
      secretName = "workflow-parameter-store"
      secretKey = "smtp_password"
    }
    new ConfigMapEntry {
      name = "DOMAIN"
      configMapName = "atlan-defaults"
      configMapKey = "domain"
    }
  }.toList()
  hidden configVars: List<NamedPair> = config.properties.fold(List(), (acc: List<NamedPair>, key, property) ->
    acc.add(resolvePropertyToVar(key, property))
  )
  hidden nestedConfig: NestedConfig = new NestedConfig {
    inputs = config.properties.fold(new Mapping {}, (acc: Mapping<String, Config.UIElement>, key, property) ->
      (acc) {
        [key] = property
      }
    ).toMap()
  }
  env: List<NamedPair> = defaultVars + configVars + List(nestedConfig)
}

/// Used to render the configmap for a new connector type.
local class ConnectorConfigMap extends ConfigMap {
  fixed metadata: Mapping<String, Any> = new Mapping {
    ["name"] = name
    ["labels"] = new Mapping<String, String> {
      ["workflows.argoproj.io/configmap-type"] = "Parameter"
      ["orchestration.atlan.com/version"] = "1"
      ["orchestration.atlan.com/source"] = config.source.replaceAll(" ", "")
    }
  }
  fixed data: Mapping<String, String> = new Mapping {
    ["icon"] = config.icon
    ["helpdeskLink"] = config.helpdesk
    ["logo"] = config.logo
    ["connector"] = config.source
    ["defaultConnectorType"] = config.connectorType
    ["jdbcCredentialTemplate"] = config.jdbcCredential
    ["restCredentialTemplate"] = config.restCredential
    ["odbcCredentialTemplate"] = config.odbcCredential
    ["grpcCredentialTemplate"] = config.grpcCredential
    ["restMetadataTemplate"] = config.restMetadata
    ["restMetadataOutputTransformerTemplate"] = config.restTransformer
    when (config.sage != null) { ["sageTemplate"] = config.sage }
    when (config.soda != null) { ["sodaConnectionTemplate"] = config.soda }
    ["config"] = new JsonRenderer {}.renderValue(config)
  }
  hidden name: String
  hidden config: Credential
}

const function resolvePropertyToVar(key: String, property: Config.UIElement): NameValuePair = new NameValuePair {
  name = key.toUpperCase()
  value = if (property is Config.FileUploader || property is Config.FileCopier)
    new NamePathS3Tuple { inputName = key }.path
  else
    "{{inputs.parameters.\(key)}}"
}

const function getSafeTaskName(name: String): String = name.replaceAll("_", "-")
const DEFAULT_FILE = "argo-artifacts/atlan-update/@atlan-packages-last-safe-run.txt"
const S3_CONFIG_PREFIX = "output_prefix"
