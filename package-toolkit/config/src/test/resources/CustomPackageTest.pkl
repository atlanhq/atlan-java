/* SPDX-License-Identifier: Apache-2.0
   Copyright 2024 Atlan Pte. Ltd. */
amends "modulepath:/Config.pkl"

import "pkl:semver"
import "modulepath:/Connectors.pkl"

packageId = "@csa/openapi-spec-loader"
packageName = "OpenAPI Spec Loader"
version = semver.Version("1.0.0")
description = "Loads API specs and paths from an OpenAPI (v3) definition."
iconUrl = "http://assets.atlan.com/assets/apispec.png"
docsUrl = "https://developer.atlan.com/samples/loaders/openapi/"
implementationLanguage = "Kotlin"
containerImage = "ghcr.io/atlanhq/atlan-kotlin-samples:\(version)"
containerCommand {
  "/dumb-init"
  "--"
  "java"
  "OpenAPISpecLoaderKt"
}
outputs {
  files {
    ["debug-logs"] = "/tmp/debug.log"
  }
}
keywords {
  "kotlin"
  "crawler"
  "openapi"
}
preview = true
connectorType = Connectors.API

uiConfig {
  tasks {
    ["Configuration"] {
      description = "OpenAPI spec configuration"
      inputs {
        ["spec_url"] = new TextInput {
          title = "Specification URL"
          required = true
          helpText = "Full URL to the JSON form of the OpenAPI specification."
          placeholderText = "https://petstore3.swagger.io/api/v3/openapi.json"
        }
      }
    }
    ["Connection"] {
      description = "Connection details"
      inputs {
        ["connection_usage"] = new Radio {
          title = "Connection"
          required = true
          possibleValues {
            ["CREATE"] = "Create"
            ["REUSE"] = "Reuse"
          }
          default = "REUSE"
          helpText = "Whether to create a new connection to hold these API assets, or reuse an existing connection."
        }
        ["connection"] = new ConnectionCreator {
          title = "Connection"
          required = true
          helpText = "Enter details for a new connection to be created."
        }
        ["connection_qualified_name"] = new ConnectionSelector {
          title = "Connection"
          required = true
          helpText = "Select an existing connection to load assets into."
        }
        ["credential_guid"] = new CredentialInput {
          title = "Credential"
          credType = "csa-connectors-gcs"
          required = true
          helpText = "Select a credential to use for this connection."
        }
      }
    }
  }
  rules {
    new UIRule {
      whenInputs { ["connection_usage"] = "REUSE" }
      required { "connection_qualified_name" }
    }
    new UIRule {
      whenInputs { ["connection_usage"] = "CREATE" }
      required { "connection" }
    }
  }
}

credentialConfig {
  name = "atlan-connectors-snowflake"
  source = Connectors.SNOWFLAKE
  icon = "https://docs.snowflake.com/en/_images/logo-snowflake-sans-text.png"
  helpdesk = "https://ask.atlan.com/hc/en-us/articles/4417168972689-How-to-set-up-your-Snowflake-connection-with-Atlan"
  logo = "https://1amiydhcmj36tz3733v94f15-wpengine.netdna-ssl.com/wp-content/themes/snowflake/assets/img/logo-blue.svg"
  jdbcCredential = """
    {
      "className": "net.snowflake.client.jdbc.SnowflakeDriver",
      "jarLink": "https://atlan-public.s3-eu-west-1.amazonaws.com/atlan/jdbc/snowflake.tar.gz",
      "url": "jdbc:snowflake://{{ host }}?loginTimeout=5&networkTimeout=5&CLIENT_SESSION_KEEP_ALIVE=true&application=atlan{% if authType == "keypair" %}&private_key_file={{ "{{__jdbc_private_key}}" }}{% endif %}&CLIENT_RESULT_CHUNK_SIZE=100&CLIENT_MEMORY_LIMIT=1000",
      "driverProperties": {% if authType == "keypair" %}
        { "username" : "{{ username }}", "user": "{{ username }}", "__jdbc_private_key_pass": {{ extra.private_key_password | tojson }}, "__jdbc_private_key": {{ password | tojson }} }
      {% elif authType == "oauth" %}
        {"authenticator": "{{ authType }}", "role": "{{ extra.role }}", "warehouse": "{{ extra.warehouse }}", "token": "{{ extra.accessTokenSecret }}"}
      {% elif authType == "okta" %}
        {"user":"{{ username }}", "password": {{ password | tojson }}, "authenticator": "{{ extra.authenticator }}"}
      {% else %}
        {"username": "{{ username }}", "user": "{{ username }}", "password": {{ password | tojson }} }
      {% endif %}
    }
    """
  sage = """
    {
      "schemasCheck": {
          "curls": [
            {
              "name": "schemas",
              "curl": "curl --location --request POST 'http://heka-service.heka.svc.cluster.local/credential/test' --header 'Content-Type: application/json' --data-raw '{\"query\": \"show atlan schemas\"}'",
              "addCredential": true,
              "credentialConnectorType": "jdbc"
            }
          ],
        "responseTemplate": "{{- $includeFilter := dict}} {{- if eq `string` (printf `%T` (index .formData `include-filter`)) }} {{- $includeFilter = index .formData `include-filter` | fromJson}} {{- else }} {{- $includeFilter = index .formData `include-filter` }} {{- end }} {{- $allowedDatabases := list}} {{- $allowedSchemas := list}} {{- $missingObjectName := ``}} {{- $checkSuccess := true }} {{- range $schemaList :=  .schemas.results }} {{- $allowedDatabases = append $allowedDatabases $schemaList.TABLE_CATALOG }} {{- $allowedSchemas = append $allowedSchemas (print $schemaList.TABLE_CATALOG `.` $schemaList.TABLE_SCHEM )}} {{- end }} {{- range $filteredDb, $filteredSchemas := $includeFilter }} {{- $_db := upper $filteredDb | trimPrefix `^` | trimSuffix `$` }} {{- $checkSuccess = and $checkSuccess (has $_db $allowedDatabases) }} {{- if not (has $_db $allowedDatabases)}} {{- $missingObjectName = (print $_db ` ` `database`)}} {{- end }} {{- range $schmea := $filteredSchemas }} {{- $_schema := upper $schmea | trimPrefix `^` | trimSuffix `$` }}  {{- $checkSuccess = and $checkSuccess (has (print $_db `.` (upper $_schema)) $allowedSchemas)}} {{- if not (has (print $_db `.` (upper $_schema)) $allowedSchemas)}} {{- $missingObjectName = (print $_db `.` (upper $_schema) ` ` `schema`)}} {{- end }} {{- end }} {{- end }} {{- $response := dict `successMessage` `` `failureMessage` `` `data` dict `response` dict }} {{- if $checkSuccess }} {{- $_ := set $response `successMessage` `Check successful` }} {{- else }} {{- $_ := set $response `failureMessage` (print `Check failed for ` $missingObjectName) }} {{- end }} {{- $response | toJson }}"
      },
      "warehouseAccessCheck": {
        "curls": [
            {
              "name": "databases",
              "curl": "curl --location --request POST 'http://heka-service.heka.svc.cluster.local/credential/test' --header 'Content-Type: application/json' --data-raw '{\"query\": \"show atlan databases\"}'",
              "addCredential": true,
              "credentialConnectorType": "jdbc"
            },
            {
              "name": "queries",
              "curl": "curl --location --request POST 'http://heka-service.heka.svc.cluster.local/credential/test' --header 'Content-Type: application/json' --data-raw '{\"query\": \"SELECT count(*) from {{with .databases.results}}{{(index . 0).TABLE_CATALOG}}{{else}}public{{end}}.information_schema.tables\"}'",
              "addCredential": true,
              "credentialConnectorType": "jdbc"
            }
        ],
        "responseTemplate": "{{- $errors := .queries.errors }} {{- $response := dict `successMessage` `Check successful` `failureMessage` `` `data` dict `response` dict }} {{- $_ := set $response `response` .queries | toJson }} {{- if $errors }} {{- if (gt (len $errors) 0) }} {{- $_ := set $response `failureMessage` `Can't query any of the database.` }} {{- end}} {{- end}} {{- $response | toJson -}}"
      },
      "schemasCheckAU": {
          "curls": [
            {
              "name": "schemas",
              "curl": "curl --location --request POST 'http://heka-service.heka.svc.cluster.local/credential/test' --header 'Content-Type: application/json' {{- $auDb := index . `account-usage-database-name`}} {{- $auSchema := index . `account-usage-schema-name`}} --data-raw '{\"query\": \"select CATALOG_NAME, SCHEMA_NAME from {{$auDb}}.{{$auSchema}}.SCHEMATA WHERE DELETED IS NULL;\"}'",
              "addCredential": true,
              "credentialConnectorType": "jdbc"
            }
          ],
        "responseTemplate": "{{- $includeFilter := dict}} {{- if eq `string` (printf `%T` (index .formData `include-filter`)) }} {{- $includeFilter = index .formData `include-filter` | fromJson}} {{- else }} {{- $includeFilter = index .formData `include-filter` }} {{- end }} {{- $allowedDatabases := list}} {{- $allowedSchemas := list}} {{- $missingObjectName := ``}} {{- $checkSuccess := true }} {{- range $schemaList :=  .schemas.results }} {{- $allowedDatabases = append $allowedDatabases $schemaList.TABLE_CATALOG }} {{- $allowedSchemas = append $allowedSchemas (print $schemaList.TABLE_CATALOG `.` $schemaList.TABLE_SCHEM )}} {{- end }} {{- range $filteredDb, $filteredSchemas := $includeFilter }} {{- $_db := upper $filteredDb | trimPrefix `^` | trimSuffix `$` }} {{- $checkSuccess = and $checkSuccess (has $_db $allowedDatabases) }} {{- if not (has $_db $allowedDatabases)}} {{- $missingObjectName = (print $_db ` ` `database`)}} {{- end }} {{- range $schmea := $filteredSchemas }} {{- $_schema := upper $schmea | trimPrefix `^` | trimSuffix `$` }}  {{- $checkSuccess = and $checkSuccess (has (print $_db `.` (upper $_schema)) $allowedSchemas)}} {{- if not (has (print $_db `.` (upper $_schema)) $allowedSchemas)}} {{- $missingObjectName = (print $_db `.` (upper $_schema) ` ` `schema`)}} {{- end }} {{- end }} {{- end }} {{- $response := dict `successMessage` `` `failureMessage` `` `data` dict `response` dict }} {{- if $checkSuccess }} {{- $_ := set $response `successMessage` `Check successful` }} {{- else }} {{- $_ := set $response `failureMessage` (print `Check failed for ` $missingObjectName) }} {{- end }} {{- $response | toJson }}"
      },
      "minersQueryHistoryCheck": {
        "curls": [
            {
              "name": "history",
              "curl": "curl --location --request POST 'http://heka-service.heka.svc.cluster.local/credential/test' --header 'Content-Type: application/json' --data-raw  {{- $auDb := `SNOWFLAKE` }} {{- $auSc := `ACCOUNT_USAGE` }} {{- if eq (printf `%s` (index . `snowflake-database`)) `cloned` }}     {{- $auDb = index . `database-name` }}     {{- $auSc = index . `schema-name` }} {{- end }} '{\"query\": \"select * from  {{$auDb}}.{{$auSc}}.QUERY_HISTORY LIMIT 1;\"}'",
              "addCredential": true,
              "credentialConnectorType": "jdbc"
            }
        ],
        "responseTemplate": "{{- $errors := .history.errors }} {{- $response := dict `successMessage` `Check successful` `failureMessage` `` `data` dict `response` dict }} {{- if $errors }} {{- if (gt (len $errors) 0) }} {{- $_ := set $response `failureMessage` `Can't access the query history view. Please run the command in your snowflake instance: GRANT IMPORTED PRIVILEGES ON DATABASE snowflake TO ROLE atlan_user_role;` }} {{- end}} {{- end}} {{- $response | toJson -}}"
      },
      "minersAccessHistoryCheck": {
        "curls": [
            {
              "name": "history",
              "curl": "curl --location --request POST 'http://heka-service.heka.svc.cluster.local/credential/test' --header 'Content-Type: application/json' --data-raw  {{- $auDb := `SNOWFLAKE` }} {{- $auSc := `ACCOUNT_USAGE` }} {{- if eq (printf `%s` (index . `snowflake-database`)) `cloned` }}     {{- $auDb = index . `database-name` }}     {{- $auSc = index . `schema-name` }} {{- end }} '{\"query\": \"select * from  {{$auDb}}.{{$auSc}}.ACCESS_HISTORY LIMIT 1;\"}'",
              "addCredential": true,
              "credentialConnectorType": "jdbc"
            }
        ],
        "responseTemplate": "{{- $errors := .history.errors }} {{- $response := dict `successMessage` `Check successful` `failureMessage` `` `data` dict `response` dict }} {{- if $errors }} {{- if (gt (len $errors) 0) }} {{- $_ := set $response `failureMessage` `Can't access the access history view. Please run the command in your snowflake instance: GRANT IMPORTED PRIVILEGES ON DATABASE snowflake TO ROLE atlan_user_role;` }} {{- end}} {{- end}} {{- $response | toJson -}}"
      },
      "minersSessionsCheck": {
        "curls": [
            {
              "name": "history",
              "curl": "curl --location --request POST 'http://heka-service.heka.svc.cluster.local/credential/test' --header 'Content-Type: application/json' --data-raw  {{- $auDb := `SNOWFLAKE` }} {{- $auSc := `ACCOUNT_USAGE` }} {{- if eq (printf `%s` (index . `snowflake-database`)) `cloned` }}     {{- $auDb = index . `database-name` }}     {{- $auSc = index . `schema-name` }} {{- end }} '{\"query\": \"select * from  {{$auDb}}.{{$auSc}}.SESSIONS LIMIT 1;\"}'",
              "addCredential": true,
              "credentialConnectorType": "jdbc"
            }
        ],
        "responseTemplate": "{{- $errors := .history.errors }} {{- $response := dict `successMessage` `Check successful` `failureMessage` `` `data` dict `response` dict }} {{- if $errors }} {{- if (gt (len $errors) 0) }} {{- $_ := set $response `failureMessage` `Can't access the sessions view. Please run the command in your snowflake instance: GRANT IMPORTED PRIVILEGES ON DATABASE snowflake TO ROLE atlan_user_role;` }} {{- end}} {{- end}} {{- $response | toJson -}}"
      },
      "crawlerCheck": {
        "curls": [
          {
            "name": "testConnector",
            "curl": "curl --location --request POST 'http://atlas-service-atlas.atlas.svc.cluster.local/api/meta/search/indexsearch' --header 'Accept: application/json' --header 'Authorization: Bearer {{ index . \"atlan-token\"}}' --header 'Content-Type: application/json' --data-raw '{\"dsl\":{\"from\":0,\"size\":1,\"query\":{\"bool\":{\"filter\":{\"bool\":{\"must\":[{\"term\":{\"qualifiedName\":\"{{index . \"connection-qualified-name\"}}\"}},{\"term\":{\"__state\":\"ACTIVE\"}},{\"terms\":{\"__typeName.keyword\":[\"Connection\"]}}]}}}}}}'",
            "addCredential": false,
            "credentialConnectorType": ""
         },
         {
           "name": "testCurrentState",
           "curl": "",
           "addCredential": true,
           "credentialConnectorType": "s3",
           "extras": "{ \"s3_prefix\" : \"argo-artifacts/default/snowflake/{{(index . \"connection-qualified-name\") | trimPrefix \"default/snowflake/\"}}/current-state\", \"s3_bucket_name\": \"{{index . \"artifact-bucket-name\"}}\", \"ignore_empty\": true }"
         }
        ],
        "responseTemplate": "{{ $response := dict `successMessage` `` `failureMessage` `` `data` dict `response` dict }} {{ if not .testConnector.entities }}     {{ $_ := set $response `failureMessage` `Check failed. Connection does not exist.` }} {{ else }}     {{ $failOnCurrentState := true}}     {{ range $file := .testCurrentState }}         {{ if contains `current-state` $file }}             {{ $failOnCurrentState = false }}         {{ end }}     {{ end }}      {{ if $failOnCurrentState }}         {{ $_ := set $response `failureMessage` `Check failed. Workflow artifacts are missing. Please run the crawler workflow again.` }}     {{ else }}         {{ $_ := set $response `successMessage` `Check successful` }}     {{ end }} {{ end }} {{- $response | toJson -}}"
      },
      "minerS3Check": {
        "curls": [
            {
              "name": "s3",
              "curl": "",
              "addCredential": true,
              "credentialConnectorType": "s3",
              "extras": "{ \"s3_prefix\" : \"{{- index . `extraction-s3-prefix` }}\", \"s3_bucket_name\": \"{{- (index . `extraction-s3-bucket`) | trimPrefix `s3://` }}\" , \"s3_region\": \"\" }"
            }
        ],
        "responseTemplate": "{{- $response := dict `successMessage` `Check successful` `failureMessage` `` `data` dict `response` dict }} {{- $_ := set $response `data` .s3 }} {{- $response | toJson -}}"
      }
    }
    """
  soda = """
    {
      "type": "snowflake",
      "username": {{ username | tojson }},
      "account": {{ host  | replace('/', '')| replace('.snowflakecomputing.com', '') | tojson }},
      "warehouse": {{ extra.warehouse | tojson }},
      "database": "",
      "schema": "",
      "role": {{ extra.role | tojson }},
      "passcode_in_password": false,
      "private_key_path": null,
      "authenticator": "snowflake",
      "QUERY_TAG": null,
      "QUOTED_IDENTIFIERS_IGNORE_CASE": null,
      {% if authType == "basic" %}
      "private_key": null,
      "private_key_passphrase": null,
      "password": {{ password | tojson }}
      {% else %}
      "private_key": {{ password | tojson }},
      "private_key_passphrase": {{ extra.private_key_password | tojson }},
      "password": null
      {% endif %}
    }
    """
  commonInputs {
    ["name"] = new TextInput {
      title = "Name"
      required = false
      hide = true
      placeholderText = "Host Name"
    }
    ["connector"] = new TextInput {
      title = "Connector"
      required = false
      hide = true
      placeholderText = "Connector"
    }
    ["connector_type"] = new TextInput {
      title = "connectorType"
      required = false
      hide = true
      placeholderText = "connectorType"
    }
    ["host"] = new TextInput {
      title = "Account Identifiers (Host)"
      placeholderText = "<account-id>.<region>.aws.snowflakecomputing.com"
      prepend = "https://"
      width = 6
    }
    ["port"] = new NumericInput {
      title = "Port"
      default = 443
      enabled = false
      width = 2
    }
  }
  options {
    ["basic"] {
      title = "Basic"
      hide = true
      inputs {
        ["username"] = new TextInput {
          title = "Username"
          required = true
          defaultValue = "atlanadmin"
          width = 4
        }
        ["password"] = new PasswordInput {
          title = "Password"
          required = true
          width = 4
        }
        ["extra"] = new NestedInput {
          title = "Role and Warehouse"
          inputs {
            ["role"] = new SQLExecutor {
              title = "Role"
              sqlQuery = "show grants"
              width = 4
            }
            ["warehouse"] = new SQLExecutor {
              title = "Warehouse"
              sqlQuery = "show warehouses"
              width = 4
            }
          }
        }
      }
    }
    ["keypair"] {
      title = "Keypair"
      inputs {
        ["username"] = new TextInput {
          title = "Username"
          placeholderText = "Username"
          width = 4
        }
        ["password"] = new TextBoxInput {
          title = "Encrypted Private Key"
          placeholderText = "-----BEGIN ENCRYPTED PRIVATE KEY-----MIIE6TAbBgkqhkiG9w0BBQMwDgQILYPyCppzOwECAggABIIEyLiGSpeeGSe3xHP1wHLjfCYycUPennlX2bd8yX8xOxGSGfvB+99+PmSlex0FmY9ov1J8H1H9Y3lMWXbL...-----END ENCRYPTED PRIVATE KEY-----"
          width = 4
        }
        ["extra"] = new NestedInput {
          title = "Private Key Password"
          inputs {
            ["private_key_password"] = new PasswordInput {
              title = "Private Key Password"
              width = 5
            }
            ["role"] = new SQLExecutor {
              title = "Role"
              sqlQuery = "show grants"
              width = 4
            }
            ["warehouse"] = new SQLExecutor {
              title = "Warehouse"
              sqlQuery = "show warehouses"
              width = 4
            }
          }
        }
      }
    }
    ["okta"] {
      title = "OKTA SSO"
      inputs {
        ["username"] = new TextInput {
          title = "Username"
          placeholderText = "Username"
          width = 4
        }
        ["password"] = new PasswordInput {
          title = "Password"
          width = 4
        }
        ["extra"] = new NestedInput {
          title = "Private Key Password"
          inputs {
            ["authenticator"] = new TextInput {
              title = "Authenticator"
              placeholderText = "Enter your authenticator code"
              width = 4
            }
            ["role"] = new SQLExecutor {
              title = "Role"
              sqlQuery = "show grants"
              width = 4
            }
            ["warehouse"] = new SQLExecutor {
              title = "Warehouse"
              sqlQuery = "show warehouses"
              width = 4
            }
          }
        }
      }
    }
  }
}
