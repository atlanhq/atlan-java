/* SPDX-License-Identifier: Apache-2.0
   Copyright 2024 Atlan Pte. Ltd. */

/// Template for defining a custom model in Atlan.
///
/// | Variable | | Usage |
/// |---|---|---|
/// | **t** | | A prefix for the types in the custom model (CamelCased) |
/// | **a** | | A prefix for the attributes in the custom model (lowerCamelCased) |
/// | **[shared][ReusableElements]** | | An abstract model defining common attributes or structures for other assets in the custom model |
/// | **[customTypes][CustomAssetType]** | | A list of custom entity types that can be instantiated in the custom model |
@ModuleInfo { minPklVersion = "0.25.1" }
module com.atlan.typedef.Model

import "Renderers.pkl"

/// Prefix to namespace all **types** in the custom model.
///
/// This should be in CamelCase.
t: String

/// Prefix to namespace all **attributes** in the custom model.
///
/// This should be in lowerCamelCase.
a: String = t.toLowerCase()

/// [ReusableElements] defining metadata shared across other types in the custom model.
shared: ReusableElements

/// One or more [CustomAssetType]s that can be instantiated in the custom model.
///
/// Remember in Pkl to define a mapping, put the key in square brackets and the value in curly braces:
/// ```
/// customTypes {
///   ["NameOfAssetType1"] {
///     ...
///   }
///   ["NameOfAssetType2"] {
///     ...
///   }
///   ...
/// }
/// ```
customTypes: Mapping<String, CustomAssetType>?

/// Validates the provided string value is in PascalCase.
local const PascalCase = (str) -> str.matches(Regex("[A-Z][a-zA-Z0-9]*"))

/// Validates the provided string value is in camelCase.
local const camelCase = (str) -> str.matches(Regex("[a-z][a-zA-Z0-9]*"))

/// Validates the provided string value is in snake_case.
local const lower_snake_case = (str) -> str.matches(Regex("[a-z0-9_]*"))

/// Translate the provided text into lower_snake_case.
/// - `text` the text to translate
const function getLowerSnakeCase(text: String): String = getSnakeCase(text).toLowerCase()
local const function getSnakeCase(text: String): String = text.replaceAll("_", "").replaceAll(Regex("([A-Z]+)([A-Z][a-z])"), "$1_$2").replaceAll(Regex("([a-z])([A-Z])"), "$1_$2")

/// Type of an attribute.
/// - `string`
/// - `long` for whole numbers
/// - `float` for decimal numbers
/// - `boolean`
/// - `date` for date and time
/// - `enum` for an enumeration, in which case you must also specify `enumName` as an additional property for the attribute
/// - `struct` for a struct, in which case you must also specify `structName` as an additional property for the attribute
typealias DataType = "string"|"long"|"float"|"boolean"|"date"|"enum"|"struct"

/// Type of index in Elastic for this attribute.
/// - `default`
/// - `keyword` allows exact matches and "starts-with" searches
/// - `text` allows full-text searches (tokenization of the value)
/// - `both` allows both exact matches and full-text searches
/// - `truncate` truncates what can actually be searched (use for very long strings)
typealias IndexType = "default"|"keyword"|"text"|"both"|"truncate"

/// Type of tag propagation through the relationship.
/// - `NONE` tags will not be propagated through this relationship
/// - `ONE_TO_TWO` tags will be propagated from endDef1 to endDef2
/// - `TWO_TO_ONE` tags will be propagated from endDef2 to endDef1
/// - `BOTH` tags will be propagated in both directions
typealias PropagationType = "NONE"|"ONE_TO_TWO"|"TWO_TO_ONE"|"BOTH"

/// Cardinality of an attribute.
/// - `SINGLE` for a single value
/// - `SET` for multiple values
typealias Cardinality = "SINGLE"|"SET"

/// Category of a relationship.
/// - `AGGREGATION` where one end of the relationship "contains" or "owns" the assets at the other end of the relationship
/// - `ASSOCIATION` for peer-to-peer (typically 1:1 or m:n) relationships
typealias RelationshipCategory = "AGGREGATION"|"ASSOCIATION"

/// Metadata shared across other types in the custom model.
///
/// | Variable | | Usage |
/// |---|---|---|
/// | **[supertypeDefinition][EntityDef]** | | Define a single entity type all others will inherit from |
/// | **[enums][EnumDef]** | | (Optional) enumerations that are reused by a number of custom asset types in the model |
/// | **[structs][StructDef]** | | (Optional) complex, embeddable types that are reused by a number of custom assets in the model |
class ReusableElements {

  /// Singular [entity type][EntityDef] that should be the supertype for all other entity types in the custom model.
  supertypeDefinition: EntityDef

  /// (Optional) [Enumerations][EnumDef] that should be reused by a number of custom assets in the model.
  enums: Mapping<String, EnumDef>?

  /// (Optional) Structures that define [complex, embeddable types][StructDef] that should be reused by a number of custom assets in the model.
  structs: Mapping<String, StructDef>?

  /// Configuration of the user interface for the overall model.
  ui: AreaUI?
}

/// A specific type that can be instantiated within the custom model.
///
/// Note that the name of the type will be taken from the outer mapping in which it is defined,
/// while the supertype will automatically be set to the supertype defined in [shared][ReusableElements].
///
/// | Variable | | Usage |
/// |---|---|---|
/// | **description** | | Explain the custom asset type |
/// | [attributes][AttributeDef] | | (Optional) map of attributes unique to this custom asset |
/// | [enums][EnumDef] | | (Optional) enumerations that are specific to the custom entity type |
/// | [structs][StructDef] | | (Optional) complex, embeddable types that are specific to the custom entity type |
/// | [relationships][RelationshipDef] | | (Optional) relationships that are specific to the custom entity type |
/// | superTypes | | (Optional) names of additional supertypes for the custom entity type |
class CustomAssetType {

  /// Explanation of the custom asset.
  description: String

  /// (Optional) Map (by unique name) of [attributes][AttributeDef] for the custom asset.
  /// Remember that attributes from any supertypes will automatically be inherited and should not be listed again here
  /// in the subtype.
  hidden attributes: Mapping<String, AttributeDef>?

  /// Label for this type as it should appear in the UI (when singular).
  hidden label: String?

  /// Label for this type as it should appear in the UI (when plural).
  hidden labelPlural: String? = if (label != null) "\(label)s" else null

  /// Icon to represent the custom asset in the UI.
  hidden icon: Icon?

  /// Name of the attribute containing the unique name of this asset's parent asset (denormalized).
  hidden parentQualifiedName: String?

  /// (Optional) [Enumerations][EnumDef] that are specific to the custom asset.
  hidden enums: Mapping<String, EnumDef>?

  /// (Optional) Structures that define [complex, embeddable types][StructDef] that are specific to the custom asset.
  hidden structs: Mapping<String, StructDef>?

  /// (Optional) [Relationships][RelationshipDef] that are specific to the custom asset.
  hidden relationships: Mapping<String, RelationshipDef>?

  /// (Optional) Names of additional supertypes for the custom asset.
  /// Note: the core supertype defined as part of this model will always be included (automatically).
  hidden superTypes: Listing<String>?
}

open class TypeDef {

  /// Name for the new type.
  name: String

  /// Fixed category for the type -- this will be set automatically, and cannot be overridden.
  fixed category: String = "ERROR"

  /// Explanation of the type definition.
  description: String

  /// Overall namespace for the type definition. This should be left as-is (`atlan`) unless told otherwise.
  serviceType: String = "atlan"

  /// Version number for the type definition. This should be incremented any time you are modifying an existing type definition.
  typeVersion: String = "1.0"

  /// Generated list of [attributes][AttributeDef] for the type definition.
  fixed attributeDefs: List<AttributeDef>? = if (attributes != null)
    attributes.fold(List(), (acc: List<AttributeDef>, key, value) ->
      let (attrDef =
        (value) { name = key } // Set the name from the map's key
      ) acc.add(attrDef)
    ) else List()

  /// (Optional) Map (by unique name) of [attributes][AttributeDef] for the type definition.
  /// Remember that attributes from any supertypes will automatically be inherited and should not be listed again here
  /// in the subtype.
  hidden attributes: Mapping<String, AttributeDef>?
}

/// Definition of a type of custom entity.
///
/// | Variable | | Usage |
/// |---|---|---|
/// | **name** | | Unique name of the entity type, which should start with `\(t)` |
/// | **description** | | Explanation of the custom entity type |
/// | **superTypes** | | At least one super type, typically the type defined in the `supertypeDefinition` |
/// | **[attributeDefs][AttributeDef]** | | (Optional) List of attributes unique to this custom entity type |
class EntityDef extends TypeDef {
  name: String(PascalCase)

  /// Label for this type as it should appear in the UI (when singular).
  hidden label: String?

  /// Label for this type as it should appear in the UI (when plural).
  hidden labelPlural: String? = if (label != null) "\(label)s" else null

  /// Icon to represent the asset in the UI.
  hidden icon: Icon?

  /// Category is set automatically and fixed (should not be changed).
  fixed category = "ENTITY"

  /// List of super types for the entity definition. This should include the supertype for the custom model in any custom
  /// assets, and usually the supertype of `Catalog` for the supertype definition.
  superTypes: Listing<String>(length > 0)

  /// Configuration of the user interface for this typedef.
  hidden ui: TypeUI?
}

/// Definition of a single attribute within a type definition.
///
/// | Variable | | Usage |
/// |---|---|---|
/// | **name** | | Unique name of the attribute, which should start with `\(a)` |
/// | **description** | | Explanation of the attribute |
/// | **type** | | Type of the attribute, either a primitive (`string`, `int`, `float`, `boolean`, `date`) or `enum` |
/// | **enumName** | | (Optional) Name of the enumeration this attribute should use, if type is `enum` |
/// | **structName** | | (Optional) Name of the struct this attribute should use, if type is `struct` |
/// | **multiValued** | | (Optional) Whether this attribute should allow multiple values (true) or not (false - default) |
/// | **defaultValue** | | (Optional) Default value for the attribute |
/// | **isDefaultValueNull** | | (Optional) Whether the attribute has a default value of being empty (true) or not (false) |
/// | **isOptional** | | (Optional) Whether the attribute is mandatory (false) or optional (true - default) |
/// | **valuesMinCount** | | (Optional) Minimum number of values the attribute should have |
/// | **valuesMaxCount** | | (Optional) Maximum number of values the attribute should have |
/// | **isUnique** | | (Optional) Whether the attribute is unique (true) or not (false - default) |
/// | **isIndexable** | | (Optional) Whether the attribute is indexed in-memory via Cassandra (true) or not (false - default) |
/// | **includeInNotification** | | (Optional) Whether the attribute should generate a notification when its value changes (true - default) or not (false) |
/// | **skipScrubbing** | | (Optional) TBC |
/// | **searchWeight** | | (Optional) TBC |
/// | **indexAs** | | (Optional) What kind of index(es) to create in Elastic for this attribute |
open class AttributeDef {
  local resolvedType = if (type == "enum") enumName else if (type == "struct") structName else type

  /// Name for the new attribute.
  name: String(camelCase)

  /// Label for this attribute as it should appear in the UI (when singular).
  hidden label: String?

  /// Label for this attribute as it should appear in the UI (when plural).
  hidden labelPlural: String? = if (label != null) "\(label)s" else null

  /// Whether this attribute captures a count of children assets (true) or not (default, false).
  hidden childCount: Boolean = false

  /// Explanation of the attribute (what data it holds, how it is used).
  description: String

  /// Type of the attribute -- this will be set automatically from the
  /// `type`, `multiValued` and `enumName` parameters.
  fixed typeName = if (multiValued) "array<\(resolvedType)>" else resolvedType

  /// Type of the attribute. This should be either:
  /// - A primitive Atlan type.
  /// - The special value `enum` to indicate an enumeration. In this case, you must also specify `enumName` as an additional property for the attribute.</li>
  hidden type: DataType

  /// Whether this attribute should allow multiple values (true) or not (false - default).
  hidden multiValued: Boolean = false

  /// Name of the enumeration that this attribute should use, if you have specified type = `enum`.
  hidden enumName: String(if (type == "enum") this != "" else true) = ""

  /// Name of the struct that this attribute should use, if you have specified type = `struct`.
  hidden structName: String(if (type == "struct") this != "" else true) = ""

  /// Default value for the attribute.
  defaultValue: String?

  /// Indicates whether the attribute has a default value of being empty (true) or not (false).
  isDefaultValueNull: Boolean?

  /// Indicates whether the attribute is mandatory (false) or optional (true - default).
  isOptional: Boolean = true

  /// Specifies whether the attribute is single or multivalued -- this will be set automatically
  /// from the `multiValued` parameter.
  fixed cardinality: Cardinality = if (multiValued) "SET" else "SINGLE"

  /// Minimum number of values the attribute should have.
  valuesMinCount: Int32?

  /// Maximum number of values the attribute should have.
  valuesMaxCount: Int32?

  /// Whether the attribute is unique (true) or not (false - default).
  isUnique: Boolean = false

  /// Whether the attribute is indexed in-memory via Cassandra (true) or not (false - default).
  isIndexable: Boolean = false

  /// Whether the attribute should generate a notification when its value changes (true - default) or not (false).
  includeInNotification: Boolean = true

  /// TBC
  skipScrubbing: Boolean = true

  /// TBC
  searchWeight: Int32?

  /// What kind of index(es) to create in Elastic for this attribute.
  /// - `keyword` creates only a keyword (exact match) index
  /// - `text` creates only a textual (tokenized) index
  /// - `both` creates both a keyword and a textual index
  hidden indexAs: IndexType = "default"

  /// Details to set a keyword index in Elastic -- this is managed automatically through setting
  /// `indexAs`.
  fixed indexType = if (indexAs == "keyword" || (indexAs == "default" && (type == "string" || type == "enum"))) "STRING" else null

  /// Details to set a textual index in Elastic -- this is managed automatically through setting
  /// `indexAs`.
  fixed indexTypeESConfig: Mapping<String, String>? =
    if (indexAs == "text" || indexAs == "both") new Mapping {
      ["analyzer"] = "atlan_text_analyzer"
    } else if (indexAs == "truncate") new Mapping {
      ["analyzer"] = "truncate_analyzer"
    } else null

  /// Details to set a textual index in Elastic -- this is managed automatically through setting
  /// `indexAs`.
  fixed indexTypeESFields: Mapping<String, Mapping<String, String>>? = if (indexAs == "both") new Mapping {
    ["keyword"] = new Mapping {
      ["type"] = "keyword"
      ["normalizer"] = "atlan_normalizer"
    }
  } else null
}

/// Definition of a relationship between two entity types.
///
/// You should generally define these only on any child entity types, pointing to their parent entity type.
/// (But in any case, a given relationship should only ever be defined once in the model, not repeated across
/// entity types.)
///
/// Note: The name, label, and category of the relationship will all be set automatically based on the other parameters.
///
/// | Variable | | Usage |
/// |---|---|---|
/// | description | | Explanation of the relationship |
/// | **[endDef1][RelationshipEndDef]** | | Definition for the first endpoint of the relationship |
/// | **[endDef2][RelationshipEndDef]** | | Definition for the second endpoint of the relationship |
/// | **propagateTags** | | (Optional) Whether Atlan tags should propagate throguh this relationship or not (default: not) |
/// | **[relationshipAttributeDefs][RelationshipAttributeDef]** | | (Optional) List of attributes that can be managed on each instance of the relationship |
class RelationshipDef extends TypeDef {

  /// Category is set automatically and fixed (should not be changed).
  fixed category = "RELATIONSHIP"

  /// Definition for the parent [endpoint][RelationshipEndDef] of the relationship, in a parent-child relationship.
  hidden parent: RelationshipEndDef?

  /// Definition for the child [endpoint][RelationshipEndDef] of the relationship, in a parent-child relationship.
  hidden children: RelationshipEndDef?

  /// Definition of peer [endpoint][RelationshipEndDef]s in a peer-to-peer relationship.
  hidden peers: Listing<RelationshipEndDef>?(if (this != null) length == 2 else true)

  /// Whether the peer-to-peer relationship is many-to-many (m:n) (defaults to true).
  hidden manyToMany: Boolean = true

  /// (Generated) Definition for the first [endpoint][RelationshipEndDef] of the relationship.
  fixed endDef1: RelationshipEndDef =
    if (parent != null && children != null) (parent) { isContainer = true }
    else if (peers != null) (peers[0]) { when (manyToMany) { cardinality = "SET" } }
    else throw("A relationship must either have both parent and children defined, or peers defined.")

  /// (Generated) Definition for the second [endpoint][RelationshipEndDef] of the relationship.
  fixed endDef2: RelationshipEndDef =
    if (parent != null && children != null) children
    else if (peers != null) (peers[1]) { when (manyToMany) { cardinality = "SET" } }
    else throw("A relationship must either have both parent and children defined, or peers defined.")

  /// Whether Atlan tags should propagate through this relationship, and if so in which direction(s):
  /// - `NONE` tags will not be propagated through this relationship (default)
  /// - `ONE_TO_TWO` tags will be propagated from endDef1 to endDef2 (parent to child)
  /// - `TWO_TO_ONE` tags will be propagated from endDef2 to endDef1 (child to parent)
  /// - `BOTH` tags will be propagated in both directions
  propagateTags: PropagationType = "NONE"

  /// Unique name for the relationship type definition -- this will be generated automatically
  /// based on the `endDef1` and `endDef2` parameters.
  name: String(lower_snake_case) = "\(getLowerSnakeCase(endDef2.name))_\(getLowerSnakeCase(endDef1.name))"

  /// Unique label for the relationship type definition -- this will be generated automatically
  /// based on the `endDef1` parameter.
  fixed relationshipLabel = "__\(endDef1.type).\(endDef1.name)"

  /// Kind of relationship.
  /// This will be set to 'AGGREGATION' automatically for any 1:n or n:1 relationships, and
  /// to 'ASSOCIATION' otherwise, but can also be overridden.
  relationshipCategory: RelationshipCategory =
    if ((endDef1.cardinality == "SET" && endDef2.cardinality == "SINGLE") || (endDef1.cardinality == "SINGLE" && endDef2.cardinality == "SET"))
      "AGGREGATION"
    else "ASSOCIATION"

  /// Generated list of [relationship attributes][RelationshipAttributeDef] for the type definition.
  fixed relationshipAttributeDefs: List<RelationshipAttributeDef>? = relationshipAttributes?.fold(List(), (acc: List<RelationshipAttributeDef>, key, value) ->
    let (attrDef =
      (value) {
        name = key // Set the name from the map's key
      }
    )
      acc.add(attrDef)
  )

  /// (Optional) List of attributes that can be managed on each instance of the relationship.
  hidden relationshipAttributes: Mapping<String, RelationshipAttributeDef>?
}

/// Definition of one end of a relationship.
///
/// Note: The cardinality of the relationship endpoint will be set automatically based on the other parameters.
///
/// | Variable | | Usage |
/// |---|---|---|
/// | **type** | | Name of the custom entity type at this end of the relationship |
/// | **name** | | Name of the attribute on this end of the relationship, that refers to the *other* entity type (other end of the relationship) |
/// | **description** | | Explanation of the relationship from this end of it |
/// | **isContainer** | | (Optional) Whether this end of the relationship is a container ("owns" the other end's assets) (default: false) |
/// | **isLegacyAttribute** | | (Optional) TBC |
class RelationshipEndDef {

  /// Name of the custom entity type at this end of the relationship.
  type: String

  /// Name of the attribute on this end of the relationship, that refers to the *other* entity type (other end of the relationship).
  hidden attribute: String(camelCase)

  /// Name of the attribute on this end of the relationship, that refers to the *other* entity type (other end of the relationship).
  fixed name: String(camelCase) = attribute

  /// Description of the relationship from this end of it.
  description: String

  /// Whether this end of the relationship is a container ("owns" the other end's assets) (default: false).
  isContainer: Boolean = false

  /// TBC
  isLegacyAttribute: Boolean = false

  /// Cardinality of this end of the relationship.
  /// This will be set automatically based on `isContainer` (if true, to 'SET', otherwise to 'SINGLE'),
  /// but you can also override it according to your specific needs.
  cardinality: Cardinality = if (isContainer) "SET" else "SINGLE"
}

/// Definition of an attribute that can be managed on each instance of the relationship.
///
/// | Variable | | Usage |
/// |---|---|---|
/// | **name** | | Name of the attribute that represents this end of the relationship |
/// | **description** | | Explanation of the relationship from this end of it |
/// | **type** | | Name of the custom entity type this relationship points to (the type at the other end of the relationship) |
/// | **isContainer** | | (Optional) Whether this end of the relationship is a container ("owns" the other end's assets) (default: false) |
/// | **isLegacyAttribute** | | (Optional) TBC |
class RelationshipAttributeDef extends AttributeDef {

  /// TBC
  isLegacyAttribute: Boolean?

  /// TBC
  relationshipTypeName: String?
}

/// Definition of an enumeration of valid values.
///
/// | Variable | | Usage |
/// |---|---|---|
/// | **name** | | Unique name of the enumeration of values, which should usually start with `\(t)` |
/// | **description** | | Explanation of the enumeration of values |
/// | **[elementDefs][EnumElementDef]** | | List of valid values for the enumeration |
class EnumDef extends TypeDef {

  /// Category is set automatically and fixed (should not be changed).
  fixed category = "ENUM"

  /// Overall namespace for the type definition. This should be left as-is (`atlas_core`) to avoid the enumeration
  /// appearing as one defined via the UI.
  serviceType = "atlas_core"

  /// List of valid values for the enumeration.
  hidden validValues: Mapping<String, EnumElementDef>

  /// (Generated) List of valid values for the enumeration.
  fixed elementDefs: List<EnumElementDef> = validValues.fold(List(), (acc: List<EnumElementDef>, key, element) ->
    let (elementDef =
      (element) {
        ordinal = acc.length
        value = key // Set the value from the map's key
      }
    )
      acc.add(elementDef)
  )

  fixed attributeDefs = null
}

/// Definition of a single valid value for an enumeration.
///
/// | Variable | | Usage |
/// |---|---|---|
/// | **ordinal** | | Position of the valid value within the list of valid values (must be unique, sequential) |
/// | **value** | | Value of the lement (the valid value) |
/// | **description** | | (Optional) Description of the element (valid value) |
class EnumElementDef {

  /// Position of the element within the list of valid values (must be unique, sequential).
  ordinal: Int32

  /// Value of the element (the valid value).
  value: String

  /// (Optional) Description of the element.
  description: String?
}

/// Definition of a complex, embeddable structure that can be used as an attribute.
///
/// | Variable | | Usage |
/// |---|---|---|
/// | **name** | | Unique name of the embeddable type, which should start with `\(t)` |
/// | **description** | | Explanation of the embeddable type |
/// | **[attributeDefs][AttributeDef]** | | List of attributes unique to this embeddable type |
class StructDef extends TypeDef {

  /// Category is set automatically and fixed (should not be changed).
  fixed category = "STRUCT"
}

/// Configuration of the user interface for this entire model area.
class AreaUI {
  /// Filename of the SVG for the image, which must exist under assets/images/source/svg.
  svgName: String(endsWith(".svg"))

  /// Filters, in top-down order, for the model area's overall discovery.
  filters: Mapping<String, FilterUI>?

  /// Whether the source can be queried (true) or not (false - default).
  isQueryableSource: Boolean = false

  /// Hierarchy (top-down) that defines any breadcrumb for the model area, keyed by typeName of each type of
  /// asset to include in the breadcrumb hierarchy.
  breadcrumb: Mapping<String, Breadcrumb>?

  /// (Generated) Details about the overall image for the model area.
  fixed image: ImageDetails = new ImageDetails {
    svg = svgName
  }

  /// (Generated) List of filters, automatically populating the level and parent details.
  fixed hierarchyFilters: List<FilterUI>?(this == null || length <= 2) =
    filters?.fold(List(), (acc: List<FilterUI>, type, value) ->
      let (fullFilter = (value) {
        typeName = type
        level = acc.length + 1
        parent = acc.getOrNull(acc.length - 1)?.typeName ?? ""
      })
      acc.add(fullFilter)
    )
}

class Breadcrumb {
  /// Name of the attribute containing the qualifiedName for this level of the breadcrumb trail.
  q: String

  /// Name of the attribute containing the simple (not qualified) name for this level of the breadcrumb trail.
  n: String
}

/// Details for the overall image to use for this model area.
class ImageDetails {
  fixed svgUrl = "\(svgPath)?url"
  fixed svgPath = "~/assets/images/source/svg/\(svg)"
  svg: String(endsWith(".svg"))
}

/// Details for an icon.
class Icon {
  /// Name of the icon.
  name: String

  /// (Generated) Name of the active version of the icon (if any).
  nameActive: String = if (activeVariant) "\(name)Active" else name

  /// Filename for the SVG of the icon. (File itself should be placed under ~/assets/images/icons/.)
  svg: String(endsWith(".svg"))

  /// Filename for the SVG of the active version of the icon. (File itself should be placed under ~/assets/images/icons/.)
  svgActive: String(endsWith(".svg")) = svg

  /// Whether there is an active variant of this icon (true) or not (false).
  fixed activeVariant: Boolean = svgActive != svg

  /// (Generated) Path for the icon file.
  fixed path = "~/assets/images/icons/\(svg)"

  /// (Generated) Path for the active version of the icon file (if any).
  fixed pathActive = "~/assets/images/icons/\(svgActive)"
}

/// Details for a single level of the hierarchy to filter by in overall discovery.
class FilterUI {
  /// (Generated) Name of the asset type that is selected at this level of the filter hierarchy.
  typeName: String?

  /// (Generated) Name of the parent level in the filter hierarchy.
  parent: String?

  /// Name of the attribute to use to filter assets within this level of the hierarchy.
  attribute: String

  /// (Generated) Level of the filter in the hierarchy.
  level: Int32?
}

/// Configuration of the user interface specific to one asset type.
class TypeUI {

  /// Icon to use to repersent this level of the filter, which must already exist in the iconMap.
  icon: Icon
  searchCard: SearchCardUI?
  profileTabs: ProfileTabUI?
  sidebarTabs: SidebarTabUI?
}

class SearchCardUI {
  footerBlocks: Listing<UIBlock>?
}

class ProfileTabUI {
  overviewSummaryBlocks: Listing<UIBlock>?
  includeAIDescription: Boolean = true
  relationsTab: String? // TODO
}

class SidebarTabUI {
  overviewTab: String? // TODO
  relationsTab: String? // TODO
  propertiesTab: String? // TODO
  includeLineageTab: Boolean = false
  includeActivityTab: Boolean = true
  includeResourcesTab: Boolean = true
  includeRequestsTab: Boolean = true
}

class UIBlock {
  attribute: String
  prefix: String?
  suffix: String?
  plural: String
}

/// Used to render the appropriately-wrapped output files for typedef management.
local class TypeDefFile {
  entityDefs: Listing<EntityDef>?
  enumDefs: List<EnumDef>?
  structDefs: List<StructDef>?
  relationshipDefs: List<RelationshipDef>?
}

/// Get a set of unique icon names for the module.
/// - `m` the model to get unique icon names for
local const function getUniqueIcons(m): Set<String> = new Listing {
  for (_, asset: CustomAssetType in m.customTypes) {
    asset.icon.svg
    when (asset.icon.activeVariant) {
      asset.icon.svgActive
    }
  }
}.toSet()

/// Set up multiple outputs for the module, one for each custom type definition.
/// - `m` the model to generate outputs for
const function getOutputs(m): Mapping<String, FileOutput> = new Mapping {
  ["models/\(m.shared.supertypeDefinition.name).json"] = getSupertypeJson(m)
  when (m.customTypes != null) {
    for (typeName, asset in m.customTypes) {
      ["models/\(m.shared.supertypeDefinition.name)/\(typeName).json"] = getCustomTypeJson(typeName, asset, m.shared.supertypeDefinition.name)
    }
  }
  ["frontend/\(m.shared.supertypeDefinition.name)/src/constant/source/\(m.shared.supertypeDefinition.name.decapitalize())/common/index.ts"] = new FileOutput {
    renderer = new Renderers.IndexL3 { model = m }
  }
  ["frontend/\(m.shared.supertypeDefinition.name)/src/constant/source/\(m.shared.supertypeDefinition.name.decapitalize())/index.ts"] = new FileOutput {
    renderer = new Renderers.IndexL2 { model = m }
  }
  ["frontend/\(m.shared.supertypeDefinition.name)/src/constant/source/\(m.shared.supertypeDefinition.name.decapitalize())/methods.ts"] = new FileOutput {
    renderer = new Renderers.Methods { model = m }
  }
  ["frontend/\(m.shared.supertypeDefinition.name)/src/constant/source/index.ts-snippet"] = new FileOutput {
    renderer = new Renderers.IndexL1 { model = m }
  }
  ["frontend/\(m.shared.supertypeDefinition.name)/src/components/common/widgets/summary/types/parentAssetInline.vue-snippet"] = new FileOutput {
    renderer = new Renderers.ParentAssetInline { model = m }
  }
  ["frontend/\(m.shared.supertypeDefinition.name)/src/locales/en.json-snippet"] = new FileOutput {
    renderer = new Renderers.Localizations { model = m }
  }
  for (iconName: String in getUniqueIcons(m)) {
    ["frontend/\(m.shared.supertypeDefinition.name)/src/assets/images/icons/\(iconName)-PLACEHOLDER"] = new FileOutput {
      text = "REPLACE WITH ACTUAL SVG FILE"
    }
  }
  ["frontend/\(m.shared.supertypeDefinition.name)/src/components/common/icon/iconMap.ts-snippet"] = new FileOutput {
    renderer = new Renderers.IconMap { model = m }
  }
  ["frontend/\(m.shared.supertypeDefinition.name)/src/api/schemas/metastore/atlas/entityDefs/\(m.shared.supertypeDefinition.name).json"] = getSupertypeJson(m)
  when (m.customTypes != null) {
    ["frontend/\(m.shared.supertypeDefinition.name)/src/constant/source/\(m.shared.supertypeDefinition.name.decapitalize())/common/assetTypes.ts"] = new FileOutput {
      renderer = new Renderers.AssetTypes { model = m }
    }
    ["frontend/\(m.shared.supertypeDefinition.name)/src/constant/source/\(m.shared.supertypeDefinition.name.decapitalize())/common/getAssetTypes.ts"] = new FileOutput {
      renderer = new Renderers.GetAssetTypes { model = m }
    }
    ["frontend/\(m.shared.supertypeDefinition.name)/src/constant/source/\(m.shared.supertypeDefinition.name.decapitalize())/common/hierarchyFilters.ts"] = new FileOutput {
      renderer = new Renderers.HierarchyFilters { model = m }
    }
    ["frontend/\(m.shared.supertypeDefinition.name)/src/constant/projection.ts-snippet"] = new FileOutput {
      renderer = new Renderers.Projection { model = m }
    }
    ["frontend/\(m.shared.supertypeDefinition.name)/src/composables/discovery/useBody.ts-snippet"] = new FileOutput {
      renderer = new Renderers.UseBody { model = m }
    }
    for (typeName, asset in m.customTypes) {
      ["frontend/\(m.shared.supertypeDefinition.name)/src/api/schemas/metastore/atlas/entityDefs/\(m.shared.supertypeDefinition.name)/\(typeName).json"] = getCustomTypeJson(typeName, asset, m.shared.supertypeDefinition.name)
      ["frontend/\(m.shared.supertypeDefinition.name)/src/constant/source/\(m.shared.supertypeDefinition.name.decapitalize())/attributes/\(typeName.decapitalize()).ts"] = new FileOutput {
        renderer = new Renderers.Attributes {
          model = m
          assetType = typeName
        }
      }
    }
  }
}

/// Generate the JSON for the supertype definition.
/// - `m` the model to generate JSON for
const function getSupertypeJson(m): FileOutput = new FileOutput {
  value = new TypeDefFile {
    entityDefs {
      m.shared.supertypeDefinition
    }
    enumDefs = listifyEnums(m.shared.enums)
    structDefs = listifyStructs(m.shared.structs)
  }
  renderer = new JsonRenderer {}
}

/// Generate the JSON for a single custom type definition.
/// - `typeName` the name of the custom type definition to generate JSON for
/// - `asset` the custom type definition to generate JSON for
/// - `supertypeName` the name of the super types for the custom type definition
const function getCustomTypeJson(typeName: String, asset: CustomAssetType, supertypeName: String): FileOutput = new FileOutput {
  value = new TypeDefFile {
    entityDefs {
      customTypeToEntityDef(asset, typeName, supertypeName)
    }
    enumDefs = listifyEnums(asset.enums)
    structDefs = listifyStructs(asset.structs)
    relationshipDefs = listifyRelationships(asset.relationships)
  }
  renderer = new JsonRenderer {}
}

const function customTypeToEntityDef(customType: CustomAssetType, typeName: String, supertypeName: String): EntityDef = new EntityDef {
  name = typeName
  label = customType.label
  labelPlural = customType.labelPlural
  icon = customType.icon
  description = customType.description
  superTypes = new {
    supertypeName
    for (extraType in customType.superTypes ?? List()) {
      when (extraType != supertypeName) {
        extraType
      }
    }
  }
  attributes = customType.attributes
}

const function listifyEnums(enums: Mapping<String, EnumDef>?): List<EnumDef>? =
  enums?.fold(List(), (acc: List<EnumDef>, typeName, value) ->
    acc.add(resolveEnum(typeName, value))
  )

const function listifyStructs(structs: Mapping<String, StructDef>?): List<StructDef>? =
  structs?.fold(List(), (acc: List<StructDef>, typeName, value) ->
    acc.add(resolveStruct(typeName, value))
  )

const function listifyRelationships(relations: Mapping<String, RelationshipDef>?): List<RelationshipDef>? =
  relations?.fold(List(), (acc: List<RelationshipDef>, _, value) ->
    acc.add(value)
  )

const function resolveEnum(enumName: String, enum: EnumDef): EnumDef = (enum) {
  name = enumName
}

const function resolveStruct(structName: String, struct: StructDef): StructDef = (struct) {
  name = structName
}

/// Translate the model content into a set of files for both type definitions (JSON)
/// and UI configuration (TypeScript).
const function getModuleOutput(m): ModuleOutput = new ModuleOutput {
  files = getOutputs(m)
}

/// Set the output of the module to be separate files for each custom type definition in the model.
output = getModuleOutput(this)

/// (Generated) List of [EntityDef]s for the custom model.
fixed customEntityDefs: List<EntityDef>? = customTypes?.fold(List(), (acc: List<EntityDef>, typeName, details) ->
  acc.add(customTypeToEntityDef(details, typeName, shared.supertypeDefinition.name))
)

/// (Generated) List of [StructDef]s for the custom model.
fixed customStructDefs: List<StructDef>? = customTypes?.fold(List(), (acc: List<StructDef>, _, details) ->
  acc + (listifyStructs(details.structs) ?? List())
)

/// (Generated) List of [EnumDef]s for the custom model.
fixed customEnumDefs: List<EnumDef>? = customTypes?.fold(List(), (acc: List<EnumDef>, _, details) ->
  acc + (listifyEnums(details.enums) ?? List())
)

/// (Generated) List of [RelationshipDef]s for the custom model.
fixed customRelationshipDefs: List<RelationshipDef>? = customTypes?.fold(List(), (acc: List<RelationshipDef>, _, details) ->
  acc + (listifyRelationships(details.relationships) ?? List())
)
