amends "modulepath:/Model.pkl"

t = "Custom"
a = t.decapitalize()

shared {
  supertypeDefinition {
    name = t
    description = "Base class for all \(t) types."
    superTypes { "Catalog" }
    attributes {
      ["\(a)SourceId"] {
        label = "Source ID"
        description = "Unique identifier for the \(t) asset from the source system."
        type = "string"
      }
      ["\(a)DatasetName"] {
        label = "Dataset"
        description = "Simple name of the dataset in which this asset exists, or empty if it is itself a dataset."
        type = "string"
        indexAs = "both"
      }
      ["\(a)DatasetQualifiedName"] {
        description = "Unique name of the dataset in which this asset exists, or empty if it is itself a dataset."
        type = "string"
        indexAs = "keyword"
      }
    }
  }
  ui {
    svgName = "\(t).svg"
    filters {
      ["\(t)Dataset"] {
        attribute = "\(a)DatasetQualifiedName"
      }
    }
    breadcrumb {
      ["\(t)Dataset"] {
        q = "\(a)DatasetQualifiedName"
        n = "\(a)DatasetName"
      }
      ["\(t)Table"] {
        q = "tableQualifiedName"
        n = "tableName"
      }
    }
  }
}

customTypes {
  ["\(t)Dataset"] {
    label = "Dataset"
    icon = datasetIcon
    description = "Instances of \(t)Dataset in Atlan."
  }
  ["\(t)Table"] {
    label = "Table"
    icon = tableIcon
    description = "Instances of \(t)Table in Atlan."
    parentQualifiedName = "\(a)DatasetQualifiedName"
    attributes {
      ["\(a)Ratings"] {
        label = "Rating"
        description = "Ratings for the \(t)Table asset from the source system."
        type = "struct"
        structName = "\(t)Ratings"
        multiValued = true
      }
    }
    structs {
      ["\(t)Ratings"] {
        description = "Ratings for an asset from the source system."
        attributes {
          ["\(a)RatingFrom"] {
            label = "From"
            description = "Username of the user who left the rating."
            type = "string"
          }
          ["\(a)RatingOf"] {
            label = "Score"
            description = "Numeric score for the rating left by the user."
            type = "long"
          }
        }
      }
    }
    relationships {
      ["\(a)Dataset"] {
        description = "Containment relationship between \(t)Dataset and \(t)Table."
        endDef1 {
          type = "\(t)Dataset"
          name = "\(a)Tables"
          description = "\(t)Table assets contained within this \(t)Dataset."
          isContainer = true
        }
        endDef2 {
          type = "\(t)Table"
          name = "\(a)Dataset"
          description = "\(t)Dataset asset containing this \(t)Table."
        }
      }
    }
    superTypes { "Table" }
  }
  ["\(t)Field"] {
    label = "Field"
    icon = fieldIcon
    description = "Instances of \(t)Field in Atlan."
    parentQualifiedName = "tableQualifiedName"
    attributes {
      ["\(a)Temperature"] {
        label = "Temperature"
        description = "Temperature of the \(t)Table asset."
        type = "enum"
        enumName = "\(t)TemperatureType"
      }
    }
    enums {
      ["\(t)TemperatureType"] {
        description = "Valid values for \(t)Table temperatures."
        validValues {
          ["COLD"] { description = "Lowest availability, can be offline storage." }
          ["HOT"] { description = "Highest availability, must be on solid-state or in-memory storage." }
        }
      }
    }
    relationships {
      ["\(a)Table"] {
        description = "Containment relationship between \(t)Table and \(t)Field."
        endDef1 {
          type = "\(t)Table"
          name = "\(a)Fields"
          description = "\(t)Field assets contained within this \(t)Table."
          isContainer = true
        }
        endDef2 {
          type = "\(t)Field"
          name = "\(a)Table"
          description = "\(t)Table asset containing this \(t)Field."
        }
      }
    }
    superTypes { "Column" }
  }
}

local datasetIcon = new Icon {
  name = "DatabaseGray"
  nameActive = "Database"
  svg = "database-gray.svg"
  svgActive = "database.svg"
}

local tableIcon = new Icon {
  name = "TableGray"
  nameActive = "Table"
  svg = "table-gray.svg"
  svgActive = "table.svg"
}

local fieldIcon = new Icon {
  name = "ColumnGray"
  nameActive = "Column"
  svg = "column-gray.svg"
  svgActive = "column.svg"
}
