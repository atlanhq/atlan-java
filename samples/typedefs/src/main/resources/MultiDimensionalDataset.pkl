/* SPDX-License-Identifier: Apache-2.0
   Copyright 2024 Atlan Pte. Ltd. */
amends "modulepath:/Model.pkl"

t = "Cube"
a = t.toLowerCase()

local dimension = "Dimension"
local hierarchy = "Hierarchy"
local field = "Field"
local qualifiedName = "QualifiedName"
local supertypeName = "MultiDimensionalDataset"
local attrName = "Name"

local cube = new Icon {
  name = "CubeGray"
  nameActive = "Cube"
  svg = "cube-light-gray.svg"
  svgActive = "cube-light.svg"
}
local cubeDimension = new Icon {
  name = "CubeDimensionGray"
  nameActive = "CubeDimension"
  svg = "square-half-light-gray.svg"
  svgActive = "square-half-light.svg"
}
local schema = new Icon {
  name = "SchemaGray"
  nameActive = "Schema"
  svg = "schema-gray.svg"
  svgActive = "schema.svg"
}
local pivotTable = new Icon {
  name = "PivotTable"
  svg = "pivot-table.svg"
}

shared {
  supertypeDefinition {
    name = supertypeName
    description = "A dataset with multiple dimensions"
    superTypes { "Catalog" }
    attributes {
      ["\(a)\(attrName)"] {
        label = "Cube"
        description = "Simple name of the cube in which this asset exists, or empty if it is itself a cube."
        type = "string"
        indexAs = "both"
      }
      ["\(a)\(qualifiedName)"] {
        description = "Unique name of the cube in which this asset exists, or empty if it is itself a cube."
        type = "string"
        indexAs = "keyword"
      }
      ["\(a)\(dimension)\(attrName)"] {
        label = "Dimension"
        description = "Simple name of the cube dimension in which this asset exists, or empty if it is itself a dimension."
        type = "string"
        indexAs = "both"
      }
      ["\(a)\(dimension)\(qualifiedName)"] {
        description = "Unique name of the cube dimension in which this asset exists, or empty if it is itself a dimension."
        type = "string"
        indexAs = "keyword"
      }
      ["\(a)\(hierarchy)\(attrName)"] {
        label = "Hierarchy"
        description = "Simple name of the dimension hierarchy in which this asset exists, or empty if it is itself a hierarchy."
        type = "string"
        indexAs = "both"
      }
      ["\(a)\(hierarchy)\(qualifiedName)"] {
        description = "Unique name of the dimension hierarchy in which this asset exists, or empty if it is itself a hierarchy."
        type = "string"
        indexAs = "keyword"
      }
    }
  }
  ui {
    svgName = "MultiDimensional.svg"
    filters {
      [t] {
        attribute = "\(a)\(qualifiedName)"
      }
      ["\(t)\(dimension)"] {
        attribute = "\(a)\(dimension)\(qualifiedName)"
      }
    }
    breadcrumb {
      [t] {
        q = "\(a)\(qualifiedName)"
        n = "\(a)\(attrName)"
      }
      ["\(t)\(dimension)"] {
        q = "\(a)\(dimension)\(qualifiedName)"
        n = "\(a)\(dimension)\(attrName)"
      }
      ["\(t)\(hierarchy)"] {
        q = "\(a)\(hierarchy)\(qualifiedName)"
        n = "\(a)\(hierarchy)\(attrName)"
      }
    }
  }
}

customTypes {
  [t] {
    label = t
    icon = cube
    description = "Instance of a cube in Atlan."
    attributes {
      ["\(a)\(dimension)Count"] {
        label = dimension.decapitalize()
        description = "Number of dimensions in the cube."
        type = "long"
        childCount = true
      }
    }
  }
  ["\(t)\(dimension)"] {
    label = dimension
    icon = cubeDimension
    description = "Instance of a cube dimension in Atlan."
    parentQualifiedName = "\(a)\(qualifiedName)"
    attributes {
      ["\(a)\(hierarchy)Count"] {
        label = hierarchy.decapitalize()
        description = "Number of hierarchies in the cube dimension."
        type = "long"
        childCount = true
      }
    }
    relationships {
      [a] {
        description = "Containment relationship between \(t) (parent) and \(t)\(dimension) (children)."
        parent {
          type = t
          attribute = "\(a)\(dimension)s"
          description = "Individual dimensions that make up the cube."
        }
        children {
          type = "\(t)\(dimension)"
          attribute = a
          description = "Cube in which this dimension exists."
        }
      }
    }
  }
  ["\(t)\(hierarchy)"] {
    label = hierarchy
    labelPlural = "Hierarchies"
    icon = schema
    description = "Instance of a cube hierarchy in Atlan."
    parentQualifiedName = "\(a)\(dimension)\(qualifiedName)"
    attributes {
      ["\(a)\(field)Count"] {
        label = field.decapitalize()
        description = "Number of total fields in the cube hierarchy."
        type = "long"
        childCount = true
      }
    }
    relationships {
      ["\(a)\(dimension)"] {
        description = "Containment relationship between \(t)\(dimension) (parent) and \(t)\(hierarchy) (children)."
        parent {
          type = "\(t)\(dimension)"
          attribute = "\(a)Hierarchies"
          description = "Individual hierarchies that make up the dimension."
        }
        children {
          type = "\(t)\(hierarchy)"
          attribute = "\(a)\(dimension)"
          description = "Dimension in which this hierarchy exists."
        }
      }
    }
  }
  ["\(t)\(field)"] {
    label = field
    icon = pivotTable
    description = "Instance of a cube field in Atlan."
    parentQualifiedName = "\(a)\(hierarchy)\(qualifiedName)"
    attributes {
      ["\(a)Parent\(field)Name"] {
        label = "Parent field"
        description = "Name of the parent field in which this field is nested."
        type = "string"
        indexAs = "both"
      }
      ["\(a)Parent\(field)QualifiedName"] {
        description = "Unique name of the parent field in which this field is nested."
        type = "string"
        indexAs = "keyword"
      }
      ["\(a)\(field)Level"] {
        label = "Level"
        description = "Level of the field in the cube hierarchy."
        type = "long"
      }
      ["\(a)\(field)MeasureExpression"] {
        label = "Measure expression"
        description = "Expression used to calculate this measure."
        type = "string"
        indexAs = "both"
      }
      ["\(a)Sub\(field)Count"] {
        label = "sub\(field.decapitalize())"
        description = "Number of sub-fields that are direct children of this field."
        type = "long"
        childCount = true
      }
    }
    relationships {
      ["\(a)\(hierarchy)"] {
        description = "Containment relationship between \(t)\(hierarchy) (parent) and \(t)\(field) (children)."
        parent {
          type = "\(t)\(hierarchy)"
          attribute = "\(a)\(field)s"
          description = "Individual fields that make up the hierarchy."
        }
        children {
          type = "\(t)\(field)"
          attribute = "\(a)\(hierarchy)"
          description = "Hierarchy in which this field exists."
        }
      }
      ["\(a)Parent\(field)"] {
        description = "Hierarchical nesting relationship between \(t)\(field)s."
        parent {
          type = "\(t)\(field)"
          attribute = "\(a)Nested\(field)s"
          description = "Individual fields nested within this cube field."
        }
        children {
          type = "\(t)\(field)"
          attribute = "\(a)Parent\(field)"
          description = "Parent field in which this field is nested."
        }
      }
    }
  }
}
