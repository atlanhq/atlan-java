/* SPDX-License-Identifier: Apache-2.0
   Copyright 2024 Atlan Pte. Ltd. */
amends "modulepath:/Config.pkl"
import "pkl:semver"

packageId = "@csa/lake-formation-tag-sync"
packageName = "Lake Formation Tag Sync"
version = semver.Version(read("prop:VERSION_NAME"))
description = "Add Lake Formation Tags as custom metadata properties on assets."
iconUrl = "http://assets.atlan.com/assets/ph-flow-arrow-light.svg"
docsUrl = "https://solutions.atlan.com/lake-formation-tag-sync/"
implementationLanguage = "Kotlin"
containerImage = "ghcr.io/atlanhq/\(name):\(version)"
containerImagePullPolicy = if (version.toString().endsWith("-SNAPSHOT")) "Always" else "IfNotPresent"
containerCommand {
  "/dumb-init"
  "--"
  "java"
  "com.atlan.pkg.lftag.LakeTagSynchronizer"
}
outputs {
  files {
    ["debug-logs"] = "/tmp/debug.log"
  }
}
keywords {
  "kotlin"
  "utility"
}
preview = true

uiConfig {
  tasks {
    ["Source"] {
      description = "Inputs"
      inputs {
        ["import_type"] = new Radio {
          title = "Import lake tags from"
          helpText = "Select how you want to provide the file(s) containing the tags to be synched."
          possibleValues {
            ["CLOUD"] = "Object storage"
          }
          default = "CLOUD"
          hide = true
          fallback = default
        }
        ["cloud_source"] = new CredentialInput {
          title = "Import metadata from"
          required = true
          credType = "csa-connectors-s3"
          helpText = "Enter details for the object store from which to retrieve the file(s) containing metadata to be imported."
        }
        ["remove_schema"] = new BooleanInput{
          title = "Drop schema name when found as a table prefix"
          helpText = "Drom the schema name if it is present on the table name."
          width = 4
          fallback = false
        }
        ["config_type"] = new Radio {
          title = "Options"
          required = true
          possibleValues {
            ["default"] = "Default"
            ["advanced"] = "Advanced"
          }
          default = "default"
          helpText = "Options to optimize how assets are imported."
        }
        ["fail_on_errors"] = new BooleanInput {
          title = "Fail on errors"
          required = false
          helpText = "Whether an invalid value in a field should cause the import to fail (Yes) or log a warning, skip that value, and proceed (No)."
          fallback = true
        }
        ["batch_size"] = new NumericInput {
          title = "Batch size"
          required = false
          helpText = "Maximum number of rows to process at a time (per API request)."
          placeholderValue = 20
          width = 4
          fallback = placeholderValue
        }
      }
    }
  }
  rules {
    new UIRule {
      whenInputs { ["config_type"] = "advanced" }
      required {
        "fail_on_errors"
        "batch_size"
      }
    }
  }
}
