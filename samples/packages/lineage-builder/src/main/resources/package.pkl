/* SPDX-License-Identifier: Apache-2.0
   Copyright 2024 Atlan Pte. Ltd. */
amends "modulepath:/Config.pkl"
import "pkl:semver"

packageId = "@csa/lineage-builder"
packageName = "Lineage Builder"
version = semver.Version(read("prop:VERSION_NAME"))
description = "Build lineage from a CSV file."
iconUrl = "http://assets.atlan.com/assets/ph-tree-structure-light.svg"
docsUrl = "https://solutions.atlan.com/lineage-builder/"
implementationLanguage = "Kotlin"
containerImage = "ghcr.io/atlanhq/\(name):\(version)"
containerImagePullPolicy = if (version.toString().endsWith("-SNAPSHOT")) "Always" else "IfNotPresent"
containerCommand {
  "/dumb-init"
  "--"
  "java"
  "com.atlan.pkg.lb.Loader"
}
outputs {
  files {
    ["debug-logs"] = "/tmp/debug.log"
  }
}
keywords {
  "kotlin"
  "utility"
}
preview = true

uiConfig {
  tasks {
    ["Source"] {
      description = "Lineage to import"
      inputs {
        ["lineage_import_type"] = new Radio {
          title = "Import lineage from"
          required = true
          helpText = "Select how you want to provide the file containing lineage details to be imported."
          possibleValues {
            ["DIRECT"] = "Direct upload"
            ["CLOUD"] = "Object storage"
          }
          default = "DIRECT"
        }
        ["lineage_file"] = new FileUploader {
          title = "Lineage file"
          fileTypes { "text/csv" }
          required = true
          helpText = "Select the file containing lineage to import."
          placeholderText = "Select lineage CSV file"
        }
        ["lineage_prefix"] = new TextInput {
          title = "Prefix (path)"
          helpText = "Enter the directory (path) within the object store from which to retrieve the file containing lineage details."
          placeholderText = "path/to/file"
          width = 4
        }
        ["lineage_key"] = new TextInput {
          title = "Object key (filename)"
          helpText = "Enter the object key (filename), including its extension, within the object store and prefix."
          placeholderText = "lineage.csv"
          width = 4
        }
        ["cloud_source"] = new CredentialInput {
          title = "Import lineage from"
          required = true
          credType = "csa-connectors-objectstore"
          helpText = "Enter details for the object store from which to retrieve the file(s) containing lineage details to be imported."
        }
      }
    }
    ["Options"] {
      description = "Configuration options"
      inputs {
        ["lineage_upsert_semantic"] = new Radio {
          title = "Unknown asset handling"
          required = false
          possibleValues {
            ["update"] = "Skip them"
            ["partial"] = "Create partial assets"
            ["upsert"] = "Create full assets"
          }
          default = "partial"
          helpText = "How to handle assets that do not yet exist in Atlan."
        }
        ["lineage_fail_on_errors"] = new BooleanInput {
          title = "Fail on errors"
          required = false
          helpText = "Whether an invalid value in a field should cause the import to fail (Yes) or log a warning, skip that value, and proceed (No)."
        }
        ["lineage_case_sensitive"] = new BooleanInput {
          title = "Case-sensitive match for assets"
          required = false
          helpText = "Whether to use case-sensitive matching for assets (Yes) or try case-insensitive matching (No)."
        }
        ["field_separator"] = new TextInput {
          title = "Field separator"
          required = false
          helpText = "Character used to separate fields in the input file (for example, ',' or ';')."
          placeholderText = ","
          width = 4
        }
        ["batch_size"] = new NumericInput {
          title = "Batch size"
          required = false
          helpText = "Maximum number of rows to process at a time (per API request)."
          placeholderValue = 20
          width = 4
        }
      }
    }
  }
  rules {
    new UIRule {
      whenInputs { ["lineage_import_type"] = "DIRECT" }
      required { "lineage_file" }
    }
    new UIRule {
      whenInputs { ["lineage_import_type"] = "CLOUD" }
      required {
        "lineage_prefix"
        "lineage_key"
        "cloud_source"
      }
    }
  }
}
