/* SPDX-License-Identifier: Apache-2.0
   Copyright 2024 Atlan Pte. Ltd. */
amends "modulepath:/Config.pkl"
import "pkl:semver"

packageId = "@csa/relational-assets-builder"
packageName = "Relational Assets Builder"
version = semver.Version(read("prop:VERSION_NAME"))
description = "Build (and update) relational assets managed through a CSV file."
iconUrl = "http://assets.atlan.com/assets/ph-database-light.svg"
docsUrl = "https://solutions.atlan.com/relational-assets-builder/"
implementationLanguage = "Kotlin"
containerImage = "ghcr.io/atlanhq/\(name):\(version)"
containerImagePullPolicy = if (version.toString().endsWith("-SNAPSHOT")) "Always" else "IfNotPresent"
containerCommand {
  "/dumb-init"
  "--"
  "java"
  "com.atlan.pkg.rab.Importer"
}
outputs {
  files {
    ["debug-logs"] = "/tmp/debug.log"
  }
}
keywords {
  "kotlin"
  "utility"
}
preview = true

uiConfig {
  tasks {
    ["Source"] {
      description = "Input file"
      inputs {
        ["import_type"] = new Radio {
          title = "Import file from"
          possibleValues {
            ["DIRECT"] = "Direct file upload"
            ["CLOUD"] = "Object storage"
          }
          default = "DIRECT"
        }
        ["assets_file"] = new FileUploader {
          title = "Assets file"
          fileTypes { "text/csv" }
          required = false
          helpText = "Select the file containing the relational assets to import."
          placeholderText = "Select assets CSV file"
        }
        ["assets_prefix"] = new TextInput {
          title = "Prefix (path)"
          helpText = "Enter the directory (path) within the bucket/container from which to retrieve the object(s)."
          placeholderText = "path/to/files"
          width = 4
        }
        ["assets_key"] = new TextInput {
          title = "Object key (filename)"
          helpText = "Enter the object key (filename), including its extension, within the bucket/container and prefix."
          placeholderText = "file.csv"
          width = 4
        }
        ["cloud_source"] = new CredentialInput {
          title = "Assets file"
          required = true
          credType = "csa-connectors-objectstore"
          helpText = "Select how you want to provide the file containing relational assets to be imported."
        }
      }
    }
    ["Semantics"] {
      description = "Processing logic"
      inputs {
        ["assets_upsert_semantic"] = new Radio {
          title = "Input handling"
          required = false
          possibleValues {
            ["upsert"] = "Create (full) and update"
            ["partial"] = "Create (partial) and update"
            ["update"] = "Update only"
          }
          default = "upsert"
          helpText = "Whether to allow the creation of new (full or partial) assets from the input CSV, or ensure assets are only updated if they already exist in Atlan."
        }
        ["delta_semantic"] = new Radio {
          title = "Delta handling"
          required = false
          possibleValues {
            ["full"] = "Full replacement"
            ["delta"] = "Incremental"
          }
          default = "delta"
          helpText = "Whether to treat the input file as an initial load, full replacement (deleting any existing assets not in the file) or only incremental (no deletion of existing assets)."
        }
        ["delta_removal_type"] = new Radio {
          title = "Removal type"
          required = false
          possibleValues {
            ["archive"] = "Archive (recoverable)"
            ["purge"] = "Purge (cannot be recovered)"
          }
          default = "archive"
          helpText = "How to delete any assets not found in the latest file."
        }
        ["previous_file_direct"] = new TextInput {
          title = "Previous file"
          required = false
          hide = true
          helpText = "Path to a direct file (locally) to use for delta processing."
        }
      }
    }
    ["Options"] {
      description = "Configuration options"
      inputs {
        ["assets_attr_to_overwrite"] = new DropDown {
          title = "Remove attributes, if empty"
          required = false
          possibleValues {
            ["certificateStatus"] = "Certificate"
            ["announcementType"] = "Announcement"
            ["displayName"] = "Display name"
            ["description"] = "Description (system)"
            ["userDescription"] = "Description (user)"
            ["ownerUsers"] = "Owners (users)"
            ["ownerGroups"] = "Owners (groups)"
            ["assignedTerms"] = "Assigned terms"
            ["readme"] = "README"
          }
          helpText = "Select attributes you want to clear (remove) from assets if their value is blank in the provided file."
          multiSelect = true
          width = 8
        }
        ["assets_fail_on_errors"] = new BooleanInput {
          title = "Fail on errors"
          required = false
          helpText = "Whether an invalid value in a field should cause the import to fail (Yes) or log a warning, skip that value, and proceed (No)."
        }
        ["assets_field_separator"] = new TextInput {
          title = "Field separator"
          required = false
          helpText = "Character used to separate fields in the input file (for example, ',' or ';')."
          placeholderText = ","
          width = 4
        }
        ["assets_batch_size"] = new NumericInput {
          title = "Batch size"
          required = false
          helpText = "Maximum number of rows to process at a time (per API request)."
          placeholderValue = 20
          width = 4
        }
        ["track_batches"] = new BooleanInput {
          title = "Track asset details"
          required = false
          hide = true
          defaultSelection = true
          helpText = "Whether to track details about every asset across batches (Yes) or only counts (No)."
        }
      }
    }
  }
  rules {
    new UIRule {
      whenInputs { ["import_type"] = "DIRECT" }
      required { "assets_file" }
    }
    new UIRule {
      whenInputs { ["import_type"] = "CLOUD" }
      required { "assets_prefix" "assets_key" "cloud_source" }
    }
    new UIRule {
      whenInputs { ["delta_semantic"] = "full" }
      required { "delta_removal_type" }
    }
  }
}
