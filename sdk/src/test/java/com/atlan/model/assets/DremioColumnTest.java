/* SPDX-License-Identifier: Apache-2.0
   Copyright 2022 Atlan Pte. Ltd. */
package com.atlan.model.assets;

import static org.testng.Assert.*;

import com.atlan.mock.MockAtlanTenant;
import com.atlan.model.core.AtlanTag;
import com.atlan.model.core.CustomMetadataAttributes;
import com.atlan.model.enums.*;
import com.atlan.model.structs.*;
import java.io.IOException;
import java.util.*;
import javax.annotation.processing.Generated;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

@Generated(value = "com.atlan.generators.ModelGeneratorV2")
@SuppressWarnings("deprecation")
public class DremioColumnTest {

    private static final DremioColumn full = DremioColumn._internal()
            .guid("guid")
            .displayText("displayText")
            .status(AtlanStatus.ACTIVE)
            .createdBy("createdBy")
            .updatedBy("updatedBy")
            .createTime(123456789L)
            .updateTime(123456789L)
            .isIncomplete(false)
            .deleteHandler("SOFT")
            .meaningNames(Set.of("meaningName1", "meaningName2"))
            .meanings(Set.of(
                    Meaning.builder()
                            .termGuid("termGuid1")
                            .relationGuid("relationGuid1")
                            .displayText("displayText1")
                            .confidence(100)
                            .build(),
                    Meaning.builder()
                            .termGuid("termGuid2")
                            .relationGuid("relationGuid2")
                            .displayText("displayText2")
                            .confidence(100)
                            .build()))
            .qualifiedName("qualifiedName")
            .atlanTag(AtlanTag.of("String0"))
            .atlanTag(AtlanTag.builder().typeName("String1").propagate(false).build())
            .customMetadata(
                    "String0",
                    CustomMetadataAttributes.builder()
                            .attribute("String0", 123.456)
                            .attribute("String1", true)
                            .build())
            .customMetadata(
                    "String1",
                    CustomMetadataAttributes.builder()
                            // Note: for equivalency this MUST be a Long (not an Integer), as deserialization
                            // will always produce a Long
                            .attribute("String0", 789L)
                            .attribute("String1", "AnotherString")
                            .build())
            .addDremioFolderHierarchy(Map.of("key1", "value1"))
            .addDremioFolderHierarchy(Map.of("key2", "value2"))
            .dremioId("String0")
            .dremioParentFolderQualifiedName("String0")
            .dremioSourceName("String0")
            .dremioSourceQualifiedName("String0")
            .dremioSpaceName("String0")
            .dremioSpaceQualifiedName("String0")
            .calculationView(CalculationView.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .columnAverage(123.456)
            .columnAverageLength(123.456)
            .columnAverageLengthValue(123.456)
            .columnAverageValue(123.456)
            .columnCompression("String0")
            .columnDbtModelColumn(DbtModelColumn.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .columnDbtModelColumn(DbtModelColumn.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .columnDepthLevel(123)
            .columnDistinctValuesCount(123)
            .columnDistinctValuesCountLong(123456789L)
            .columnDistributionHistogram(AssetHistogram.builder()
                    .assetHistogramBoundaries(List.of(123.456, 654.321))
                    .assetHistogramFrequencies(List.of(123.456, 654.321))
                    .build())
            .columnDuplicateValuesCount(123)
            .columnDuplicateValuesCountLong(123456789L)
            .columnEncoding("String0")
            .putColumnHierarchy(Map.of("key1", "value1"))
            .putColumnHierarchy(Map.of("key2", "value2"))
            .columnHistogram(Histogram.builder()
                    .boundaries(List.of(123.456, 654.321))
                    .frequencies(List.of(123.456, 654.321))
                    .build())
            .columnIsMeasure(true)
            .columnMax(123.456)
            .columnMaxValue(123.456)
            .columnMaximumStringLength(123)
            .addColumnMax("String0")
            .addColumnMax("String1")
            .columnMean(123.456)
            .columnMeanValue(123.456)
            .columnMeasureType("String0")
            .columnMedian(123.456)
            .columnMedianValue(123.456)
            .columnMin(123.456)
            .columnMinValue(123.456)
            .columnMinimumStringLength(123)
            .addColumnMin("String0")
            .addColumnMin("String1")
            .columnMissingValuesCount(123)
            .columnMissingValuesCountLong(123456789L)
            .columnMissingValuesPercentage(123.456)
            .columnStandardDeviation(123.456)
            .columnStandardDeviationValue(123.456)
            .columnSum(123.456)
            .columnSumValue(123.456)
            .columnTopValue(ColumnValueFrequencyMap.builder()
                    .columnValue("String0")
                    .columnValueFrequency(123456789L)
                    .build())
            .columnTopValue(ColumnValueFrequencyMap.builder()
                    .columnValue("String1")
                    .columnValueFrequency(987654321L)
                    .build())
            .columnUniqueValuesCount(123)
            .columnUniqueValuesCountLong(123456789L)
            .columnUniquenessPercentage(123.456)
            .columnVariance(123.456)
            .columnVarianceValue(123.456)
            .cosmosMongoDBCollection(CosmosMongoDBCollection.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .dataQualityMetricDimension(DbtMetric.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .dataQualityMetricDimension(DbtMetric.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .dataType("String0")
            .dbtMetric(DbtMetric.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .dbtMetric(DbtMetric.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .dbtModelColumn(DbtModelColumn.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .dbtModelColumn(DbtModelColumn.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .defaultValue("String0")
            .dqBaseColumnRule(DataQualityRule.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .dqBaseColumnRule(DataQualityRule.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .dqReferenceColumnRule(DataQualityRule.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .dqReferenceColumnRule(
                    DataQualityRule.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .foreignKeyFrom(Column.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .addForeignKeyTo(Column.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .addForeignKeyTo(Column.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .isClustered(true)
            .isDist(true)
            .isForeign(true)
            .isIndexed(true)
            .isNullable(true)
            .isPartition(true)
            .isPinned(true)
            .isPrimary(true)
            .isSort(true)
            .materializedView(MaterializedView.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .maxLength(123456789L)
            .metricTimestamp(DbtMetric.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .metricTimestamp(DbtMetric.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .nestedColumnCount(123)
            .nestedColumnOrder("String0")
            .nestedColumn(Column.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .nestedColumn(Column.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .nosqlCollectionName("String0")
            .nosqlCollectionQualifiedName("String0")
            .numericScale(123.456)
            .order(123)
            .parentColumn(Column.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .parentColumnName("String0")
            .parentColumnQualifiedName("String0")
            .partitionOrder(123)
            .pinnedAt(123456789L)
            .pinnedBy("String0")
            .precision(123)
            .query(AtlanQuery.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .query(AtlanQuery.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .rawDataTypeDefinition("String0")
            .snowflakeDynamicTable(SnowflakeDynamicTable.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .subDataType("String0")
            .table(Table.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .tablePartition(TablePartition.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .validation("key1", "value1")
            .validation("key2", "value2")
            .view(View.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .calculationViewName("String0")
            .calculationViewQualifiedName("String0")
            .databaseName("String0")
            .databaseQualifiedName("String0")
            .dbtModel(DbtModel.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .dbtModel(DbtModel.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .dbtSeedAsset(DbtSeed.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .dbtSeedAsset(DbtSeed.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .dbtSource(DbtSource.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .dbtSource(DbtSource.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .dbtTest(DbtTest.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .dbtTest(DbtTest.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .isProfiled(true)
            .lastProfiledAt(123456789L)
            .queryCount(123456789L)
            .queryCountUpdatedAt(123456789L)
            .queryUserCount(123456789L)
            .putQueryUserMap("key1", 123456L)
            .putQueryUserMap("key2", 654321L)
            .schemaName("String0")
            .schemaQualifiedName("String0")
            .sqlAIModelContextQualifiedName("String0")
            .sqlDBTSource(DbtSource.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .sqlDBTSource(DbtSource.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .sqlDbtModel(DbtModel.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .sqlDbtModel(DbtModel.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .sqlIsSecure(true)
            .tableName("String0")
            .tableQualifiedName("String0")
            .viewName("String0")
            .viewQualifiedName("String0")
            .inputToAirflowTask(AirflowTask.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .inputToAirflowTask(AirflowTask.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .inputToProcess(LineageProcess.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .inputToProcess(LineageProcess.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .inputToSparkJob(SparkJob.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .inputToSparkJob(SparkJob.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .modelImplementedAttribute(ModelAttribute.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .modelImplementedAttribute(
                    ModelAttribute.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .modelImplementedEntity(ModelEntity.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .modelImplementedEntity(ModelEntity.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .outputFromAirflowTask(AirflowTask.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .outputFromAirflowTask(AirflowTask.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .outputFromProcess(LineageProcess.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .outputFromProcess(LineageProcess.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .outputFromSparkJob(SparkJob.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .outputFromSparkJob(SparkJob.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .adminGroup("String0")
            .adminGroup("String1")
            .adminRole("String0")
            .adminRole("String1")
            .adminUser("String0")
            .adminUser("String1")
            .announcementMessage("String0")
            .announcementTitle("String0")
            .announcementType(AtlanAnnouncementType.INFORMATION)
            .announcementUpdatedAt(123456789L)
            .announcementUpdatedBy("String0")
            .anomaloCheck(AnomaloCheck.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .anomaloCheck(AnomaloCheck.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .application(Application.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .applicationField(ApplicationField.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .applicationFieldQualifiedName("String0")
            .applicationQualifiedName("String0")
            .assetAnomaloAppliedCheckType("String0")
            .assetAnomaloAppliedCheckType("String1")
            .assetAnomaloCheckCount(123456789L)
            .assetAnomaloCheckStatuses("String0")
            .assetAnomaloDQStatus("String0")
            .assetAnomaloFailedCheckCount(123456789L)
            .assetAnomaloFailedCheckType("String0")
            .assetAnomaloFailedCheckType("String1")
            .assetAnomaloLastCheckRunAt(123456789L)
            .assetAnomaloSourceUrl("String0")
            .assetCoverImage("String0")
            .assetDQFreshnessExpectation(123456789L)
            .assetDQFreshnessValue(123456789L)
            .assetDQResult(DataQualityResult.PASS)
            .assetDQRowScopeFilterColumnQualifiedName("String0")
            .assetDQRuleAttachedDimension(DataQualityDimension.COMPLETENESS)
            .assetDQRuleAttachedDimension(DataQualityDimension.TIMELINESS)
            .assetDQRuleAttachedRuleType("String0")
            .assetDQRuleAttachedRuleType("String1")
            .assetDQRuleFailedCount(123456789L)
            .assetDQRuleFailedDimension(DataQualityDimension.COMPLETENESS)
            .assetDQRuleFailedDimension(DataQualityDimension.TIMELINESS)
            .assetDQRuleFailedRuleType("String0")
            .assetDQRuleFailedRuleType("String1")
            .assetDQRuleLastRunAt(123456789L)
            .assetDQRulePassedCount(123456789L)
            .assetDQRulePassedDimension(DataQualityDimension.COMPLETENESS)
            .assetDQRulePassedDimension(DataQualityDimension.TIMELINESS)
            .assetDQRulePassedRuleType("String0")
            .assetDQRulePassedRuleType("String1")
            .assetDQRuleResultTag("String0")
            .assetDQRuleResultTag("String1")
            .assetDQRuleTotalCount(123456789L)
            .assetDQScheduleCrontab("String0")
            .assetDQScheduleSourceSyncErrorCode("String0")
            .assetDQScheduleSourceSyncErrorMessage("String0")
            .assetDQScheduleSourceSyncRawError("String0")
            .assetDQScheduleSourceSyncStatus(DataQualitySourceSyncStatus.SUCCESSFUL)
            .assetDQScheduleSourceSyncedAt(123456789L)
            .assetDQScheduleTimeZone("String0")
            .assetDQScheduleType(DataQualityScheduleType.ON_DATA_CHANGE)
            .assetDbtAccountName("String0")
            .assetDbtAlias("String0")
            .assetDbtEnvironmentDbtVersion("String0")
            .assetDbtEnvironmentName("String0")
            .assetDbtJobLastRun(123456789L)
            .assetDbtJobLastRunArtifactS3Path("String0")
            .assetDbtJobLastRunArtifactsSaved(true)
            .assetDbtJobLastRunCreatedAt(123456789L)
            .assetDbtJobLastRunDequedAt(123456789L)
            .assetDbtJobLastRunExecutedByThreadId("String0")
            .assetDbtJobLastRunGitBranch("String0")
            .assetDbtJobLastRunGitSha("String0")
            .assetDbtJobLastRunHasDocsGenerated(true)
            .assetDbtJobLastRunHasSourcesGenerated(true)
            .assetDbtJobLastRunNotificationsSent(true)
            .assetDbtJobLastRunOwnerThreadId("String0")
            .assetDbtJobLastRunQueuedDuration("String0")
            .assetDbtJobLastRunQueuedDurationHumanized("String0")
            .assetDbtJobLastRunRunDuration("String0")
            .assetDbtJobLastRunRunDurationHumanized("String0")
            .assetDbtJobLastRunStartedAt(123456789L)
            .assetDbtJobLastRunStatusMessage("String0")
            .assetDbtJobLastRunTotalDuration("String0")
            .assetDbtJobLastRunTotalDurationHumanized("String0")
            .assetDbtJobLastRunUpdatedAt(123456789L)
            .assetDbtJobLastRunUrl("String0")
            .assetDbtJobName("String0")
            .assetDbtJobNextRun(123456789L)
            .assetDbtJobNextRunHumanized("String0")
            .assetDbtJobSchedule("String0")
            .assetDbtJobScheduleCronHumanized("String0")
            .assetDbtJobStatus("String0")
            .assetDbtMeta("String0")
            .assetDbtPackageName("String0")
            .assetDbtProjectName("String0")
            .assetDbtSemanticLayerProxyUrl("String0")
            .assetDbtSourceFreshnessCriteria("String0")
            .assetDbtTag("String0")
            .assetDbtTag("String1")
            .assetDbtTestStatus("String0")
            .assetDbtUniqueId("String0")
            .assetDbtWorkflowLastUpdated("String0")
            .assetIcon(AtlanIcon.ATLAN_TAG)
            .assetInternalPopularityScore(123.456)
            .assetMcAlertQualifiedName("String0")
            .assetMcAlertQualifiedName("String1")
            .assetMcIncidentName("String0")
            .assetMcIncidentName("String1")
            .assetMcIncidentPriority("String0")
            .assetMcIncidentPriority("String1")
            .assetMcIncidentQualifiedName("String0")
            .assetMcIncidentQualifiedName("String1")
            .assetMcIncidentSeverity("String0")
            .assetMcIncidentSeverity("String1")
            .assetMcIncidentState("String0")
            .assetMcIncidentState("String1")
            .assetMcIncidentSubType("String0")
            .assetMcIncidentSubType("String1")
            .assetMcIncidentType("String0")
            .assetMcIncidentType("String1")
            .assetMcIsMonitored(true)
            .assetMcLastSyncRunAt(123456789L)
            .assetMcMonitorName("String0")
            .assetMcMonitorName("String1")
            .assetMcMonitorQualifiedName("String0")
            .assetMcMonitorQualifiedName("String1")
            .assetMcMonitorScheduleType("String0")
            .assetMcMonitorScheduleType("String1")
            .assetMcMonitorStatus("String0")
            .assetMcMonitorStatus("String1")
            .assetMcMonitorType("String0")
            .assetMcMonitorType("String1")
            .assetPoliciesCount(123456789L)
            .assetPolicyGUID("String0")
            .assetPolicyGUID("String1")
            .assetRedirectGUID("String0")
            .assetRedirectGUID("String1")
            .assetSodaCheckCount(123456789L)
            .assetSodaCheckStatuses("String0")
            .assetSodaDQStatus("String0")
            .assetSodaLastScanAt(123456789L)
            .assetSodaLastSyncRunAt(123456789L)
            .assetSodaSourceURL("String0")
            .assetSourceReadme("String0")
            .assetSpaceName("String0")
            .assetSpaceQualifiedName("String0")
            .assetTag("String0")
            .assetTag("String1")
            .assetThemeHex("String0")
            .assetUserDefinedType("String0")
            .assignedTerm(GlossaryTerm.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .assignedTerm(GlossaryTerm.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .certificateStatus(CertificateStatus.DEPRECATED)
            .certificateStatusMessage("String0")
            .certificateUpdatedAt(123456789L)
            .certificateUpdatedBy("String0")
            .connectionName("String0")
            .connectionQualifiedName("String0")
            .connectorName("String0")
            .dataContractLatest(DataContract.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .dataContractLatestCertified(DataContract.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .dbtQualifiedName("String0")
            .description("String0")
            .displayName("String0")
            .domainGUID("String0")
            .domainGUID("String1")
            .dqBaseDatasetRule(DataQualityRule.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .dqBaseDatasetRule(DataQualityRule.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .dqReferenceDatasetRule(DataQualityRule.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .dqReferenceDatasetRule(
                    DataQualityRule.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .file(File.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .file(File.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .hasContract(true)
            .hasLineage(true)
            .inputPortDataProduct(DataProduct.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .inputPortDataProduct(DataProduct.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .isAIGenerated(true)
            .isDiscoverable(true)
            .isEditable(true)
            .isPartial(true)
            .lastRowChangedAt(123456789L)
            .lastSyncRun("String0")
            .lastSyncRunAt(123456789L)
            .lastSyncWorkflowName("String0")
            .lexicographicalSortOrder("String0")
            .link(Link.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .link(Link.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .mcIncident(MCIncident.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .mcIncident(MCIncident.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .mcMonitor(MCMonitor.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .mcMonitor(MCMonitor.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .metric(DbtMetric.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .metric(DbtMetric.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .name("String0")
            .nonCompliantAssetPolicyGUID("String0")
            .nonCompliantAssetPolicyGUID("String1")
            .outputPortDataProduct(DataProduct.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .outputPortDataProduct(DataProduct.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .outputProductGUID("String0")
            .outputProductGUID("String1")
            .ownerGroup("String0")
            .ownerGroup("String1")
            .ownerUser("String0")
            .ownerUser("String1")
            .popularityScore(123.456)
            .productGUID("String0")
            .productGUID("String1")
            .readme(Readme.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .sampleDataUrl("String0")
            .schemaRegistrySubject(SchemaRegistrySubject.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .schemaRegistrySubject(
                    SchemaRegistrySubject.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .sodaCheck(SodaCheck.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .sodaCheck(SodaCheck.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .sourceCostUnit(SourceCostUnitType.CREDITS)
            .sourceCreatedAt(123456789L)
            .sourceCreatedBy("String0")
            .sourceEmbedURL("String0")
            .sourceLastReadAt(123456789L)
            .sourceOwners("String0")
            .sourceQueryComputeCostRecord(PopularityInsights.builder()
                    .recordUser("String0")
                    .recordQuery("String0")
                    .recordQueryDuration(123456789L)
                    .recordQueryCount(123456789L)
                    .recordTotalUserCount(123456789L)
                    .recordComputeCost(123.456)
                    .recordMaxComputeCost(123.456)
                    .recordComputeCostUnit(SourceCostUnitType.CREDITS)
                    .recordLastTimestamp(123456789L)
                    .recordWarehouse("String0")
                    .build())
            .sourceQueryComputeCostRecord(PopularityInsights.builder()
                    .recordUser("String1")
                    .recordQuery("String1")
                    .recordQueryDuration(987654321L)
                    .recordQueryCount(987654321L)
                    .recordTotalUserCount(987654321L)
                    .recordComputeCost(654.321)
                    .recordMaxComputeCost(654.321)
                    .recordComputeCostUnit(SourceCostUnitType.BYTES)
                    .recordLastTimestamp(987654321L)
                    .recordWarehouse("String1")
                    .build())
            .sourceQueryComputeCost("String0")
            .sourceQueryComputeCost("String1")
            .sourceReadCount(123456789L)
            .sourceReadExpensiveQueryRecord(PopularityInsights.builder()
                    .recordUser("String0")
                    .recordQuery("String0")
                    .recordQueryDuration(123456789L)
                    .recordQueryCount(123456789L)
                    .recordTotalUserCount(123456789L)
                    .recordComputeCost(123.456)
                    .recordMaxComputeCost(123.456)
                    .recordComputeCostUnit(SourceCostUnitType.CREDITS)
                    .recordLastTimestamp(123456789L)
                    .recordWarehouse("String0")
                    .build())
            .sourceReadExpensiveQueryRecord(PopularityInsights.builder()
                    .recordUser("String1")
                    .recordQuery("String1")
                    .recordQueryDuration(987654321L)
                    .recordQueryCount(987654321L)
                    .recordTotalUserCount(987654321L)
                    .recordComputeCost(654.321)
                    .recordMaxComputeCost(654.321)
                    .recordComputeCostUnit(SourceCostUnitType.BYTES)
                    .recordLastTimestamp(987654321L)
                    .recordWarehouse("String1")
                    .build())
            .sourceReadPopularQueryRecord(PopularityInsights.builder()
                    .recordUser("String0")
                    .recordQuery("String0")
                    .recordQueryDuration(123456789L)
                    .recordQueryCount(123456789L)
                    .recordTotalUserCount(123456789L)
                    .recordComputeCost(123.456)
                    .recordMaxComputeCost(123.456)
                    .recordComputeCostUnit(SourceCostUnitType.CREDITS)
                    .recordLastTimestamp(123456789L)
                    .recordWarehouse("String0")
                    .build())
            .sourceReadPopularQueryRecord(PopularityInsights.builder()
                    .recordUser("String1")
                    .recordQuery("String1")
                    .recordQueryDuration(987654321L)
                    .recordQueryCount(987654321L)
                    .recordTotalUserCount(987654321L)
                    .recordComputeCost(654.321)
                    .recordMaxComputeCost(654.321)
                    .recordComputeCostUnit(SourceCostUnitType.BYTES)
                    .recordLastTimestamp(987654321L)
                    .recordWarehouse("String1")
                    .build())
            .sourceReadQueryCost(123.456)
            .sourceReadRecentUserRecord(PopularityInsights.builder()
                    .recordUser("String0")
                    .recordQuery("String0")
                    .recordQueryDuration(123456789L)
                    .recordQueryCount(123456789L)
                    .recordTotalUserCount(123456789L)
                    .recordComputeCost(123.456)
                    .recordMaxComputeCost(123.456)
                    .recordComputeCostUnit(SourceCostUnitType.CREDITS)
                    .recordLastTimestamp(123456789L)
                    .recordWarehouse("String0")
                    .build())
            .sourceReadRecentUserRecord(PopularityInsights.builder()
                    .recordUser("String1")
                    .recordQuery("String1")
                    .recordQueryDuration(987654321L)
                    .recordQueryCount(987654321L)
                    .recordTotalUserCount(987654321L)
                    .recordComputeCost(654.321)
                    .recordMaxComputeCost(654.321)
                    .recordComputeCostUnit(SourceCostUnitType.BYTES)
                    .recordLastTimestamp(987654321L)
                    .recordWarehouse("String1")
                    .build())
            .sourceReadRecentUser("String0")
            .sourceReadRecentUser("String1")
            .sourceReadSlowQueryRecord(PopularityInsights.builder()
                    .recordUser("String0")
                    .recordQuery("String0")
                    .recordQueryDuration(123456789L)
                    .recordQueryCount(123456789L)
                    .recordTotalUserCount(123456789L)
                    .recordComputeCost(123.456)
                    .recordMaxComputeCost(123.456)
                    .recordComputeCostUnit(SourceCostUnitType.CREDITS)
                    .recordLastTimestamp(123456789L)
                    .recordWarehouse("String0")
                    .build())
            .sourceReadSlowQueryRecord(PopularityInsights.builder()
                    .recordUser("String1")
                    .recordQuery("String1")
                    .recordQueryDuration(987654321L)
                    .recordQueryCount(987654321L)
                    .recordTotalUserCount(987654321L)
                    .recordComputeCost(654.321)
                    .recordMaxComputeCost(654.321)
                    .recordComputeCostUnit(SourceCostUnitType.BYTES)
                    .recordLastTimestamp(987654321L)
                    .recordWarehouse("String1")
                    .build())
            .sourceReadTopUserRecord(PopularityInsights.builder()
                    .recordUser("String0")
                    .recordQuery("String0")
                    .recordQueryDuration(123456789L)
                    .recordQueryCount(123456789L)
                    .recordTotalUserCount(123456789L)
                    .recordComputeCost(123.456)
                    .recordMaxComputeCost(123.456)
                    .recordComputeCostUnit(SourceCostUnitType.CREDITS)
                    .recordLastTimestamp(123456789L)
                    .recordWarehouse("String0")
                    .build())
            .sourceReadTopUserRecord(PopularityInsights.builder()
                    .recordUser("String1")
                    .recordQuery("String1")
                    .recordQueryDuration(987654321L)
                    .recordQueryCount(987654321L)
                    .recordTotalUserCount(987654321L)
                    .recordComputeCost(654.321)
                    .recordMaxComputeCost(654.321)
                    .recordComputeCostUnit(SourceCostUnitType.BYTES)
                    .recordLastTimestamp(987654321L)
                    .recordWarehouse("String1")
                    .build())
            .sourceReadTopUser("String0")
            .sourceReadTopUser("String1")
            .sourceReadUserCount(123456789L)
            .sourceTotalCost(123.456)
            .sourceURL("String0")
            .sourceUpdatedAt(123456789L)
            .sourceUpdatedBy("String0")
            .addStarredBy("String0")
            .addStarredBy("String1")
            .starredCount(123)
            .starredDetail(StarredDetails.builder()
                    .assetStarredBy("String0")
                    .assetStarredAt(123456789L)
                    .build())
            .starredDetail(StarredDetails.builder()
                    .assetStarredBy("String1")
                    .assetStarredAt(987654321L)
                    .build())
            .subType("String0")
            .tenantId("String0")
            .userDefRelationshipFrom(Task.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .userDefRelationshipFrom(Task.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .userDefRelationshipTo(Task.refByGuid("705d96f4-bdb6-4792-8dfe-8dc4ca3d2c23"))
            .userDefRelationshipTo(Task.refByQualifiedName("default/snowflake/1234567890/test/qualifiedName"))
            .userDescription("String0")
            .viewScore(123.456)
            .viewerGroup("String0")
            .viewerGroup("String1")
            .viewerUser("String0")
            .viewerUser("String1")
            .build();

    private static final int hash = full.hashCode();
    private static DremioColumn frodo;
    private static String serialized;

    @BeforeClass
    void init() throws InterruptedException {
        MockAtlanTenant.initializeClient();
    }

    @Test(groups = {"DremioColumn.builderEquivalency"})
    void builderEquivalency() {
        assertEquals(full.toBuilder().build(), full);
    }

    @Test(
            groups = {"DremioColumn.serialize"},
            dependsOnGroups = {"DremioColumn.builderEquivalency"})
    void serialization() {
        assertNotNull(full);
        serialized = full.toJson(MockAtlanTenant.client);
        assertNotNull(serialized);
        assertEquals(full.hashCode(), hash, "Serialization mutated the original value,");
    }

    @Test(
            groups = {"DremioColumn.deserialize"},
            dependsOnGroups = {"DremioColumn.serialize"})
    void deserialization() throws IOException {
        assertNotNull(serialized);
        frodo = MockAtlanTenant.client.readValue(serialized, DremioColumn.class);
        assertNotNull(frodo);
    }

    @Test(
            groups = {"DremioColumn.equivalency"},
            dependsOnGroups = {"DremioColumn.serialize", "DremioColumn.deserialize"})
    void serializedEquivalency() {
        assertNotNull(serialized);
        assertNotNull(frodo);
        String backAgain = frodo.toJson(MockAtlanTenant.client);
        assertEquals(backAgain, serialized, "Serialization is not equivalent after serde loop,");
    }

    @Test(
            groups = {"DremioColumn.equivalency"},
            dependsOnGroups = {"DremioColumn.serialize", "DremioColumn.deserialize"})
    void deserializedEquivalency() {
        assertNotNull(full);
        assertNotNull(frodo);
        assertEquals(frodo, full, "Deserialization is not equivalent after serde loop,");
    }
}
