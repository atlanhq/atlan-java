/* SPDX-License-Identifier: Apache-2.0
   Copyright 2022 Atlan Pte. Ltd. */
package com.atlan.model.lineage;

import com.atlan.AtlanClient;
import com.atlan.model.core.AtlanObject;
import io.openlineage.client.OpenLineage;
import io.openlineage.client.OpenLineageClientUtils;
import java.util.UUID;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.ToString;
import lombok.experimental.SuperBuilder;

/**
 * Atlan wrapper for abstracting OpenLineage runs.
 * <br><br>
 * A run is an instance of a job that represents one of its occurrences in time.
 * <br><br>
 * Each run will have a uniquely identifiable {@code runId} that is generated by the client as a UUID. The client is responsible for maintaining the {@code runId} across different states in the same run.
 * <br><br>
 * For more details, see <a href="https://openlineage.io/docs/spec/object-model#run">OpenLineage docs</a>.
 */
@SuperBuilder(toBuilder = true, builderMethodName = "_internal")
@EqualsAndHashCode(callSuper = false)
@ToString(callSuper = true)
@SuppressWarnings("serial")
public class OpenLineageRun extends AtlanObject {
    private static final long serialVersionUID = 2L;

    private OpenLineage.RunBuilder _builder;

    /** Complete details about the OpenLineage job. */
    @Getter
    OpenLineageJob job;

    /** Internal definition of the OpenLineage run. */
    OpenLineage.Run _run;

    /**
     * Pass-through constructor for an Atlan wrapping of an existing OpenLineage run.
     *
     * @param run an OpenLinage run object that already exists
     */
    public OpenLineageRun(OpenLineage.Run run) {
        this._run = run;
    }

    /**
     * Builds the minimal object necessary to create an OpenLineage run.
     *
     * @param job the OpenLineage job for which to create a new run
     * @return the minimal request necessary to create the run, as a builder
     */
    public static OpenLineageRunBuilder<?, ?> creator(OpenLineageJob job) {
        OpenLineage ol = job.getOpenLineage();
        return _internal()
                .job(job)
                ._builder(ol.newRunBuilder()
                        .runId(UUID.randomUUID())
                        .facets(ol.newRunFacetsBuilder().build()));
    }

    // TODO: provide some intuitive way to manage the facets of the run

    /**
     * Retrieve the Run in OpenLineage standard form.
     *
     * @return the OpenLineage standard for the Run
     */
    OpenLineage.Run get_run() {
        if (_run == null) {
            _run = _builder.build();
        }
        return _run;
    }

    /** {@inheritDoc} */
    @Override
    public String toJson(AtlanClient client) {
        return OpenLineageClientUtils.toJson(get_run());
    }
}
