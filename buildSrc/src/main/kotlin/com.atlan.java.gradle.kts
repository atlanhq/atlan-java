/* SPDX-License-Identifier: Apache-2.0 */
import net.ltgt.gradle.errorprone.errorprone

plugins {
    id("java-library")
    id("jvm-test-suite")
    id("com.diffplug.spotless")
    id("io.freefair.lombok")
    id("net.ltgt.errorprone")
}

repositories {
    mavenCentral()
}

val groupName = providers.gradleProperty("GROUP").get()
val versionId = providers.gradleProperty("VERSION_NAME").get()

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

spotless {
    java {
        palantirJavaFormat("2.9.0")
        removeUnusedImports()
        licenseHeaderFile("$rootDir/LICENSE_HEADER")
    }
}

lombok {
    version.set("1.18.30")
}

tasks.delombok {
    // empty format option, otherwise the default is to use pretty formatting which overrides
    // options Lombok config options and does not add generated annotations.
    format = emptyMap()
}

dependencies {
    errorprone("com.google.errorprone:error_prone_core:2.23.0")
    errorproneJavac("com.google.errorprone:javac:9+181-r4173-1")
}

tasks.withType<JavaCompile> {
    options.release.set(project.java.targetCompatibility.majorVersion.toInt())
    options.compilerArgs.addAll(listOf("-Werror", "-Xlint:all", "-Xlint:-options", "-Xlint:-processing"))
    options.encoding = "UTF-8"

    options.errorprone {
        // This check causes warnings with autogenerated Javadoc strings.
        disable("InvalidParam")

        // Some methods in autogen'd files (defined via overrides) lack a summary. Should be trivial
        // to fix by adding the missing summaries.
        disable("MissingSummary")

        // This check is disabled because multiple nested classes may have the same name in a given
        // file. (In particular the EqualsAndHashCode from Lombok will create this in many places.)
        disable("SameNameButDifferent")

        // This check is disabled because of how we have object-based inheritance setup, and the
        // fact that every asset will have an 'attributes' and 'relationshipAttributes' field.
        disable("HidingField")

        // This check is disabled because we're self-assuring that the enums are immutable.
        disable("ImmutableEnumChecker")

        // This check is disabled as we won't use this annotation
        disable("InlineMeSuggester")

        // Disabled as we know how it works and it does what we want
        disable("StringSplitter")

        // This check is disabled because of how we have object-based inheritance setup, and the
        // inability of Lombok to generate Overrides on its generated builder-related methods.
        //disable("MissingOverride")
        // This check is disabled because of how Lombok works with SuperBuilder and the
        // AtlanObject base class not actually containing any members, yet Lombok requiring
        // the annotation here for all inherited classes to work.
        //disable("UnusedVariable")

        // Disable checks in generated code since Lombok does some things that error-prone
        // may not like (and may even cause error-prone itself to fail out with exceptions
        // during its analysis process). For example, combining @SuperBuilder and @Singular
        // annotations...
        disableWarningsInGeneratedCode.set(true)
    }
}
